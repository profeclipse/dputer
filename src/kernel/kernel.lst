
; 64tass Turbo Assembler Macro V1.58.2974? listing file
; 64tass -q --tab-size=4 --verbose-list -l /Users/davidhunt/Projects/dputer2/src/kernel/kernel.lbl -L /Users/davidhunt/Projects/dputer2/src/kernel/kernel.lst -o /Users/davidhunt/Projects/dputer2/src/kernel/kernel.bin /Users/davidhunt/Projects/dputer2/src/kernel/kernel.asm
; Sun Feb 26 23:54:59 2023

;Offset	;Hex			;Monitor		;Source

;******  Processing input file: /Users/davidhunt/Projects/dputer2/src/kernel/kernel.asm

										;*****************************************************************************
										; kernel.asm
										;*****************************************************************************
										; Memory Map:
										; 0000-002F: general purpose vectors used by kernel and monitor
										; 0030-00FF: free zero-page
										; 0100-01FF: stack
										; 0200-DBFF: free memory
										; DC00-DDFF: general kernel data
										;	DC00-DC0F: terminal i/o
										;	DC10-DCFF: file i/o (this needs to change)
										;	DD00-DDFF: keyboard ring buffer
										;	DE00-DEFF: input buffer
										; E000-FFFF: kernel code
										;-----------------------------------------------------------------------------

												.cpu "w65c02"

												.include "macros.inc"

;******  Processing file: /Users/davidhunt/Projects/dputer2/src/kernel/macros.inc

										;*****************************************************************************
										; macros.inc
										;*****************************************************************************


;******  Return to file: /Users/davidhunt/Projects/dputer2/src/kernel/kernel.asm

												.include "termio.inc"

;******  Processing file: /Users/davidhunt/Projects/dputer2/src/kernel/termio.inc

										;*****************************************************************************
										; termio.inc
										;*****************************************************************************

										; terminal data locations
=$dc00									TERMIO_BASE     	= $DC00
=56320									TERMIO_IREADY   	= TERMIO_BASE+0
=56321									TERMIO_IDATA    	= TERMIO_BASE+1
=56322									TERMIO_OREADY   	= TERMIO_BASE+2
=56323									TERMIO_ODATA    	= TERMIO_BASE+3
=56324									TERMIO_CREADY		= TERMIO_BASE+4
=56325									TERMIO_CCMD			= TERMIO_BASE+5
=56326									TERMIO_CDATA		= TERMIO_BASE+6

=1										TERMIO_CMD_CLS 		= 1
=2										TERMIO_CMD_HOME 	= 2
=3										TERMIO_CMD_CURSOR_X	= 3
=4										TERMIO_CMD_CURSOR_Y	= 4
=5										TERMIO_CMD_SCREEN_W	= 5
=6										TERMIO_CMD_SCREEN_H	= 6
=7										TERMIO_CMD_GETCUR_X	= 7
=8										TERMIO_CMD_GETCUR_Y	= 8

;******  Return to file: /Users/davidhunt/Projects/dputer2/src/kernel/kernel.asm

												.include "kernel.inc"

;******  Processing file: /Users/davidhunt/Projects/dputer2/src/kernel/kernel.inc

										;*****************************************************************************
										; kernel.inc
										;*****************************************************************************
										; Memory Map
										; 	0000 - 00CF		User Zero Page
										;	00D0 - 00FF		Reserved Zero Page
										;	0100 - 01FF		Stack
										;	0200 - DAFF		Free RAM
										;	DB00 - DCFF		Memory Mapped I/O
										;	  DB00 - DB06		Terminal I/O
										;	  DB10 - DCFF		File I/O
										;	DD00 - DDFF		Keyboard Buffer
										;	DE00 - DEFF		Kernel Input Buffer
										;	E000 - FFF8		Kernel
										;	FFFA - FFFB		NMI Vector
										;	FFFC - FFFD		Reset Vector
										;	FFFE - FFFF		IRQ Vector
										;*****************************************************************************

										; zero page vectors
=$d0									STROUT_VECTOR		= $D0		; 2 bytes
=$d2									STRIN_VECTOR		= $D2		; 2 bytes
=$d4									T1_VECTOR			= $D4		; 2 bytes
=$d6									ASAVE				= $D6
=$d7									XSAVE				= $D7
=$d8									YSAVE				= $D8
=$d9									PSAVE				= $D9
=$da									ASAVE2				= $DA
=$db									XSAVE2				= $DB
=$dc									YSAVE2				= $DC
=$dd									WIMT_VECTOR			= $DD		; 2 bytes
=$df									MON_CMD_VECTOR		= $DF		; 2 bytes
=$e1									MON_ADDR_VECTOR		= $E1		; 2 bytes
=$e3									MON_OPCODE_VECTOR	= $E3		; 2 bytes
=$e5									BRK_SAVE_A			= $E5
=$e6									BRK_SAVE_X			= $E6
=$e7									BRK_SAVE_Y			= $E7
=$e8									BRK_SAVE_SP			= $E8
=$e9									BRK_PC_VECTOR		= $E9		; 2 bytes
=$eb									BRK_STATUS_REG		= $EB
=$ec									MON_FROM_BRK		= $EC
=$ed									MON_BP_ENABLE		= $ED
=$ee									KBD_WPTR			= $EE
=$ef									KBD_RPTR			= $EF
=$f0									MON_OPCODE			= $F0
=$f1									IRQ_SAVE_A			= $F1
=$f2									IRQ_SAVE_X			= $F2
=$f3									IRQ_SAVE_Y			= $F3
=$f4									IRQ_SAVE_SP			= $F4
=$f5									HEX_ADDR_BUFFER		= $F5		; 2 byte hex address buffer
=$f7									HEX_BYTE_BUFFER		= $F7		; 1 byte hex byte buffer
=$f8									MON_COLD_START		= $F8		; 1 byte monitor cold start flag
=$00									USER_ZP				= $00		; start of user zp space

										; general purpose data
=$dd00									KBD_BUFFER			= $DD00		; 255 byte keyboard buffer
=$de00									INPUT_BUFFER		= $DE00		; 255 byte input buffer
=$ff									INPUT_BUFFER_LEN	= $FF		; max length of input string

;******  Return to file: /Users/davidhunt/Projects/dputer2/src/kernel/kernel.asm

												.include "fileio.inc"

;******  Processing file: /Users/davidhunt/Projects/dputer2/src/kernel/fileio.inc

										;*****************************************************************************
										; fileio.inc
										;*****************************************************************************

										; file i/o data locations
=$dc10									FILEIO_BASE     	= $DC10
=56336									FILEIO_CREADY		= FILEIO_BASE+0
=56337									FILEIO_CCMD			= FILEIO_BASE+1
=56338									FILEIO_CFD			= FILEIO_BASE+2
=56339									FILEIO_CMODE		= FILEIO_BASE+3
=56340									FILEIO_CDATA_LO		= FILEIO_BASE+4
=56341									FILEIO_CDATA_HI		= FILEIO_BASE+5
=56342									FILEIO_CDATA_LO2	= FILEIO_BASE+6
=56343									FILEIO_CDATA_HI2	= FILEIO_BASE+7
=56344									FILEIO_CSTATUS		= FILEIO_BASE+8

=$dc1a									FILEIO_FILENAME		= $DC1A

=1										FILEIO_CMD_OPEN		= 1
=2										FILEIO_CMD_CLOSE 	= 2
=3										FILEIO_CMD_READ		= 3
=4										FILEIO_CMD_WRITE	= 4
=5										FILEIO_CMD_SEEK		= 5
=6										FILEIO_CMD_DELETE	= 6
=7										FILEIO_CMD_FILEPOS	= 7
=8										FILEIO_CMD_FILESIZ	= 8
=9										FILEIO_CMD_FLUSH	= 9
=10										FILEIO_CMD_RESIZE	= 10

=0										FILEIO_STATUS_OK	= 0
=1										FILEIO_STATUS_EOF	= 1
=2										FILEIO_STATUS_ERR	= 2

=1										FILEIO_MODE_READ	= 1
=2										FILEIO_MODE_WRITE	= 2
=3										FILEIO_MODE_RW		= 3

;******  Return to file: /Users/davidhunt/Projects/dputer2/src/kernel/kernel.asm


										        * = $E000

=$e000									KERNELSTART = *
										;*****************************************************************************
										;				KRESET
										; Description:	RESET signal handler
										;				Initialize system and enter monitor.
										;*****************************************************************************
.e000									KRESET .block

.e000									kRESET1
.e000	d8				cld						cld

.e001	a2 ff			ldx #$ff				ldx #$ff
.e003	9a				txs						txs

.e004	20 e0 e1		jsr $e1e0		        jsr KTERMINIT
.e007	20 53 e0		jsr $e053				jsr KFILEINIT
.e00a	20 52 f2		jsr $f252				jsr KMONINIT

.e00d	58				cli				        cli

.e00e	20 1b e1		jsr $e11b				jsr KCLS

.e011	a2 1b			ldx #$1b				ldx #<kwelcome
.e013	a0 e0			ldy #$e0				ldy #>kwelcome
.e015	20 f4 e0		jsr $e0f4				jsr KWRITESTR

.e018	4c 66 e2		jmp $e266				jmp MONITOR

.e01b									kwelcome
>e01b	2a 2a 2a 20 44 50 75 74					.null "*** DPuter W65C02S v1.0 by David Hunt - 54K Bytes Free",$0a
>e023	65 72 20 57 36 35 43 30 32 53 20 76 31 2e 30 20
>e033	62 79 20 44 61 76 69 64 20 48 75 6e 74 20 2d 20
>e043	35 34 4b 20 42 79 74 65 73 20 46 72 65 65 0a 00

.e053									KFILEINIT:
.e053	9c 10 dc		stz $dc10				stz FILEIO_CREADY
.e056	9c 11 dc		stz $dc11				stz FILEIO_CCMD
.e059	9c 12 dc		stz $dc12				stz FILEIO_CFD
.e05c	9c 13 dc		stz $dc13				stz FILEIO_CMODE
.e05f	9c 14 dc		stz $dc14				stz FILEIO_CDATA_LO
.e062	9c 15 dc		stz $dc15				stz FILEIO_CDATA_HI
.e065	9c 16 dc		stz $dc16				stz FILEIO_CDATA_LO2
.e068	9c 17 dc		stz $dc17				stz FILEIO_CDATA_HI2
.e06b	9c 18 dc		stz $dc18				stz FILEIO_CSTATUS
.e06e	9c 1a dc		stz $dc1a				stz FILEIO_FILENAME
.e071	60				rts						rts

												.endblock

												.include "termio.asm"

;******  Processing file: /Users/davidhunt/Projects/dputer2/src/kernel/termio.asm

										;*****************************************************************************
										; termio.asm
										;*****************************************************************************

.e072									KREADTERM .block
.e072	78				sei								sei
.e073	a5 ef			lda $ef							lda KBD_RPTR
.e075	c5 ee			cmp $ee							cmp KBD_WPTR
.e077	d0 04			bne $e07d						bne +

.e079	a9 00			lda #$00						lda #$0
.e07b	80 0a			bra $e087						bra ++

.e07d									+
.e07d	da				phx								phx
.e07e	aa				tax								tax
.e07f	bd 00 dd		lda $dd00,x						lda KBD_BUFFER,x
.e082	e6 ef			inc $ef							inc KBD_RPTR
.e084	fa				plx								plx
.e085	c9 00			cmp #$00						cmp #$0

.e087									+
.e087	58				cli								cli
.e088	60				rts								rts
														.endblock

.e089									KUNREADTERM .block
.e089	78				sei								sei
.e08a	c6 ef			dec $ef							dec KBD_RPTR
.e08c	58				cli								cli
.e08d	60				rts								rts
														.endblock

.e08e									KCHECKTERM .block
														;sei
.e08e	a5 ef			lda $ef							lda KBD_RPTR
.e090	c5 ee			cmp $ee							cmp KBD_WPTR
.e092	d0 04			bne $e098						bne +

.e094	a9 00			lda #$00						lda #0
.e096	80 02			bra $e09a						bra ++
.e098									+
.e098	a9 ff			lda #$ff						lda #$ff
.e09a									+
														;cli
.e09a	60				rts								rts
														.endblock

										;*****************************************************************************
										; Function:		KGETCHAR
										; Description:	Read a character from the terminal. Waits until key received.
										; Input:		nothing
										; Changes:		a
										; Returns:		a - character
										;*****************************************************************************
.e09b									KGETCHAR .block
.e09b	20 72 e0		jsr $e072						jsr KREADTERM
.e09e	f0 fb			beq $e09b						beq KGETCHAR

.e0a0	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KGETSTR
										; Description:	Read a string from the terminal
										; Input:		nothing
										; Changes:		a
										; Returns:		z-string stored at INPUT_BUFFER
										;				a - length of string
										;*****************************************************************************
.e0a1									KGETSTR .block
.e0a1	5a				phy								phy

.e0a2	a0 00			ldy #$00						ldy #$00
.e0a4									nextChar
.e0a4	20 9b e0		jsr $e09b						jsr KGETCHAR
.e0a7	c9 08			cmp #$08						cmp #$08
.e0a9	f0 04			beq $e0af						beq doBackspace

.e0ab	c9 7f			cmp #$7f						cmp #$7F
.e0ad	d0 0a			bne $e0b9						bne notBackspace

.e0af									doBackspace
.e0af	c0 00			cpy #$00						cpy #$00
.e0b1	f0 f1			beq $e0a4						beq nextChar

.e0b3	88				dey								dey
.e0b4	20 e2 e0		jsr $e0e2						jsr KWRITETERM
.e0b7	80 eb			bra $e0a4						bra nextChar

.e0b9									notBackspace
.e0b9	c9 0d			cmp #$0d						cmp #$0d
.e0bb	f0 17			beq $e0d4						beq done
.e0bd	c9 0a			cmp #$0a						cmp #$0a
.e0bf	f0 13			beq $e0d4						beq done

.e0c1	c0 ff			cpy #$ff						cpy #INPUT_BUFFER_LEN
.e0c3	d0 07			bne $e0cc						bne storeChar

.e0c5	a9 07			lda #$07						lda #$07
.e0c7	20 e2 e0		jsr $e0e2						jsr KWRITETERM
.e0ca	80 d8			bra $e0a4						bra nextChar

.e0cc									storeChar
.e0cc	91 d2			sta ($d2),y						sta (STRIN_VECTOR),y
.e0ce	20 e2 e0		jsr $e0e2						jsr KWRITETERM

.e0d1	c8				iny								inc	y
.e0d2	80 d0			bra $e0a4						bra nextChar

.e0d4									done
.e0d4	a9 00			lda #$00						lda #$00
.e0d6	91 d2			sta ($d2),y						sta (STRIN_VECTOR),y

.e0d8	a9 0d			lda #$0d						lda #$0d
.e0da	20 e2 e0		jsr $e0e2						jsr KWRITETERM

.e0dd	98				tya								tya

.e0de	7a				ply								ply

.e0df	29 ff			and #$ff						and #$ff

.e0e1	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KWRITETERM
										; Description:	Write a character to the terminal
										; Input:		a - character to output
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.e0e2									KWRITETERM .block
.e0e2	48				pha								pha
.e0e3	48				pha								pha

.e0e4									readyStatus
.e0e4	ad 02 dc		lda $dc02						lda TERMIO_OREADY
.e0e7	d0 fb			bne $e0e4						bne readyStatus

.e0e9	68				pla								pla
.e0ea	8d 03 dc		sta $dc03						sta TERMIO_ODATA

.e0ed	a9 ff			lda #$ff						lda #$ff
.e0ef	8d 02 dc		sta $dc02						sta TERMIO_OREADY

.e0f2	68				pla								pla

.e0f3	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KWRITESTR
										; Description:	Writes a z-string to the terminal
										; Input:		x,y - address of string (x-lo,y-hi)
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.e0f4									KWRITESTR .block
.e0f4	48				pha								pha
.e0f5	5a				phy								phy

.e0f6	86 d0			stx $d0							stx STROUT_VECTOR
.e0f8	84 d1			sty $d1							sty STROUT_VECTOR+1

.e0fa									writeChar
.e0fa	b2 d0			lda ($d0)						lda (STROUT_VECTOR)
.e0fc	f0 12			beq $e110						beq done

.e0fe	20 e2 e0		jsr $e0e2						jsr KWRITETERM

.e101	18				clc								clc
.e102	a5 d0			lda $d0							lda STROUT_VECTOR
.e104	69 01			adc #$01						adc #1
.e106	85 d0			sta $d0							sta STROUT_VECTOR
.e108	a5 d1			lda $d1							lda STROUT_VECTOR+1
.e10a	69 00			adc #$00						adc #0
.e10c	85 d1			sta $d1							sta STROUT_VECTOR+1
.e10e	80 ea			bra $e0fa						bra writeChar

.e110									done
.e110	7a				ply								ply
.e111	68				pla								pla

.e112	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KWRITECRLF
										; Description:	Write carriage-return/line-feed to terminal
										; Input:		nothing
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.e113									KWRITECRLF .block
.e113	48				pha								pha

.e114	a9 0a			lda #$0a						lda #$0a
.e116	20 e2 e0		jsr $e0e2						jsr KWRITETERM

.e119	68				pla								pla
.e11a	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KCLS
										; Description:	Clear screen
										; Input:		nothing
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.e11b									KCLS .block
.e11b	48				pha								pha
.e11c									-
.e11c	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e11f	d0 fb			bne $e11c						bne -

.e121	a9 01			lda #$01						lda #TERMIO_CMD_CLS
.e123	8d 05 dc		sta $dc05						sta TERMIO_CCMD
.e126	9c 06 dc		stz $dc06						stz TERMIO_CDATA
.e129	a9 ff			lda #$ff						lda #$ff
.e12b	8d 04 dc		sta $dc04						sta TERMIO_CREADY

.e12e	68				pla								pla
.e12f	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KHOME
										; Description:	Move cursor to home position (0,0)
										; Input:		nothing
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.e130									KHOME .block
.e130	48				pha								pha
.e131									-
.e131	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e134	d0 fb			bne $e131						bne -

.e136	a9 02			lda #$02						lda #TERMIO_CMD_HOME
.e138	8d 05 dc		sta $dc05						sta TERMIO_CCMD
.e13b	9c 06 dc		stz $dc06						stz TERMIO_CDATA
.e13e	a9 ff			lda #$ff						lda #$ff
.e140	8d 04 dc		sta $dc04						sta TERMIO_CREADY

.e143	68				pla								pla
.e144	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KSETCURX
										; Description:	Set cursor x position
										; Input:		x - x position
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.e145									KSETCURX .block
.e145	48				pha								pha
.e146									-
.e146	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e149	d0 fb			bne $e146						bne -

.e14b	a9 03			lda #$03						lda #TERMIO_CMD_CURSOR_X
.e14d	8d 05 dc		sta $dc05						sta TERMIO_CCMD
.e150	8e 06 dc		stx $dc06						stx TERMIO_CDATA
.e153	a9 ff			lda #$ff						lda #$ff
.e155	8d 04 dc		sta $dc04						sta TERMIO_CREADY

.e158	68				pla								pla
.e159	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KSETCURY
										; Description:	Set cursor y position
										; Input:		y - y position
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.e15a									KSETCURY .block
.e15a	48				pha								pha
.e15b									-
.e15b	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e15e	d0 fb			bne $e15b						bne -

.e160	a9 04			lda #$04						lda #TERMIO_CMD_CURSOR_Y
.e162	8d 05 dc		sta $dc05						sta TERMIO_CCMD
.e165	8c 06 dc		sty $dc06						sty TERMIO_CDATA
.e168	a9 ff			lda #$ff						lda #$ff
.e16a	8d 04 dc		sta $dc04						sta TERMIO_CREADY

.e16d	68				pla								pla
.e16e	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KSETCURXY
										; Description:	Set cursor x,y position
										; Input:		x - x position
										;				y - y position
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.e16f									KSETCURXY .block
.e16f	20 45 e1		jsr $e145						jsr KSETCURX
.e172	80 e6			bra $e15a						bra KSETCURY
														.endblock

										;*****************************************************************************
										; Function:		KGETSCRW
										; Function:		Get screen width
										; Input:		nothing
										; Changes:		A
										; Returns:		width in A
										;*****************************************************************************
.e174									KGETSCRW .block
.e174	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e177	d0 fb			bne $e174						bne KGETSCRW

.e179	a9 05			lda #$05						lda #TERMIO_CMD_SCREEN_W
.e17b	8d 05 dc		sta $dc05						sta TERMIO_CCMD
.e17e	9c 06 dc		stz $dc06						stz TERMIO_CDATA
.e181	a9 ff			lda #$ff						lda #$ff
.e183	8d 04 dc		sta $dc04						sta TERMIO_CREADY

.e186									-
.e186	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e189	d0 fb			bne $e186						bne -

.e18b	ad 06 dc		lda $dc06						lda TERMIO_CDATA
.e18e	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KGETSCRH
										; Function:		Get screen height
										; Input:		nothing
										; Changes:		A
										; Returns:		height in A
										;*****************************************************************************
.e18f									KGETSCRH .block
.e18f	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e192	d0 fb			bne $e18f						bne KGETSCRH

.e194	a9 06			lda #$06						lda #TERMIO_CMD_SCREEN_H
.e196	8d 05 dc		sta $dc05						sta TERMIO_CCMD
.e199	9c 06 dc		stz $dc06						stz TERMIO_CDATA
.e19c	a9 ff			lda #$ff						lda #$ff
.e19e	8d 04 dc		sta $dc04						sta TERMIO_CREADY

.e1a1									-
.e1a1	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e1a4	d0 fb			bne $e1a1						bne -

.e1a6	ad 06 dc		lda $dc06						lda TERMIO_CDATA
.e1a9	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KGETCURX
										; Function:		Get current cursor X position
										; Input:		nothing
										; Changes:		A
										; Returns:		x-position in A
										;*****************************************************************************
.e1aa									KGETCURX .block
.e1aa	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e1ad	d0 fb			bne $e1aa						bne KGETCURX

.e1af	a9 07			lda #$07						lda #TERMIO_CMD_GETCUR_X
.e1b1	8d 05 dc		sta $dc05						sta TERMIO_CCMD
.e1b4	9c 06 dc		stz $dc06						stz TERMIO_CDATA
.e1b7	a9 ff			lda #$ff						lda #$ff
.e1b9	8d 04 dc		sta $dc04						sta TERMIO_CREADY

.e1bc									termWait
.e1bc	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e1bf	d0 fb			bne $e1bc						bne termWait

.e1c1	ad 06 dc		lda $dc06						lda TERMIO_CDATA
.e1c4	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KGETCURY
										; Function:		Get current cursor Y position
										; Input:		nothing
										; Changes:		A
										; Returns:		y-position in A
										;*****************************************************************************
.e1c5									KGETCURY .block
.e1c5	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e1c8	d0 fb			bne $e1c5						bne KGETCURY

.e1ca	a9 08			lda #$08						lda #TERMIO_CMD_GETCUR_Y
.e1cc	8d 05 dc		sta $dc05						sta TERMIO_CCMD
.e1cf	9c 06 dc		stz $dc06						stz TERMIO_CDATA
.e1d2	a9 ff			lda #$ff						lda #$ff
.e1d4	8d 04 dc		sta $dc04						sta TERMIO_CREADY

.e1d7									termWait
.e1d7	ad 04 dc		lda $dc04						lda TERMIO_CREADY
.e1da	d0 fb			bne $e1d7						bne termWait

.e1dc	ad 06 dc		lda $dc06						lda TERMIO_CDATA
.e1df	60				rts								rts
														.endblock


										;*****************************************************************************
										; Function:		KTERMINIT
										; Description:	Initializes terminal I/O
										; Input:		nothing
										; Changes:		a
										; Returns:		nothing
										;*****************************************************************************
.e1e0									KTERMINIT .block
.e1e0	9c 00 dc		stz $dc00						stz TERMIO_IREADY
.e1e3	9c 01 dc		stz $dc01						stz TERMIO_IDATA
.e1e6	9c 02 dc		stz $dc02						stz TERMIO_OREADY
.e1e9	9c 03 dc		stz $dc03						stz TERMIO_ODATA
.e1ec	9c 04 dc		stz $dc04						stz TERMIO_CREADY
.e1ef	9c 05 dc		stz $dc05						stz TERMIO_CCMD
.e1f2	9c 06 dc		stz $dc06						stz TERMIO_CDATA
.e1f5	64 ee			stz $ee							stz KBD_WPTR
.e1f7	64 ef			stz $ef							stz KBD_RPTR

.e1f9	a9 00			lda #$00						lda #<INPUT_BUFFER
.e1fb	85 d2			sta $d2							sta STRIN_VECTOR
.e1fd	a9 de			lda #$de						lda #>INPUT_BUFFER
.e1ff	85 d3			sta $d3							sta STRIN_VECTOR+1

.e201	60				rts								rts
														.endblock

;******  Return to file: /Users/davidhunt/Projects/dputer2/src/kernel/kernel.asm



										;*****************************************************************************
										; Function:		IRQ handler.
										; Description:	This is the global IRQ handler. It distinguishes between a
										;				regular IRQ and a BRK instruction. If BRK caused IRQ, then
										;				the monitor is called.
										;*****************************************************************************
.e202									DOIRQ .block
.e202	85 f1			sta $f1					sta IRQ_SAVE_A			; save registers
.e204	86 f2			stx $f2					stx IRQ_SAVE_X
.e206	84 f3			sty $f3					sty IRQ_SAVE_Y
.e208	ba				tsx						tsx
.e209	86 f4			stx $f4					stx IRQ_SAVE_SP

.e20b	68				pla						pla						; peek at the status register
.e20c	48				pha						pha

.e20d	29 10			and #$10				and #$10				; are we here because of BRK?
.e20f	f0 34			beq $e245				beq notBRK				; no, forget we were here

.e211	a5 ed			lda $ed					lda MON_BP_ENABLE		; are breakpoints enabled?
.e213	f0 30			beq $e245				beq notBRK				; no, again forget we were here

.e215	a9 01			lda #$01				lda #$1					; indicate we're entering monitor from BRK
.e217	85 ec			sta $ec					sta MON_FROM_BRK

.e219	68				pla						pla						; yes, pop the status and return address
.e21a	85 eb			sta $eb					sta BRK_STATUS_REG
.e21c	fa				plx						plx
.e21d	86 e9			stx $e9					stx BRK_PC_VECTOR
.e21f	fa				plx						plx
.e220	86 ea			stx $ea					stx BRK_PC_VECTOR+1

.e222	48				pha						pha

.e223	a5 e9			lda $e9					lda BRK_PC_VECTOR		; backup PC vector to actual BRK instruction
.e225	38				sec						sec
.e226	e9 02			sbc #$02				sbc #$02
.e228	85 e9			sta $e9					sta BRK_PC_VECTOR
.e22a	a5 ea			lda $ea					lda BRK_PC_VECTOR+1
.e22c	e9 00			sbc #$00				sbc #$00
.e22e	85 ea			sta $ea					sta BRK_PC_VECTOR+1

.e230	a6 f4			ldx $f4					ldx IRQ_SAVE_SP
.e232	86 e8			stx $e8					stx BRK_SAVE_SP
.e234	9a				txs						txs
.e235	a4 f3			ldy $f3					ldy IRQ_SAVE_Y			; restore registers
.e237	84 e7			sty $e7					sty BRK_SAVE_Y
.e239	a6 f2			ldx $f2					ldx IRQ_SAVE_X
.e23b	86 e6			stx $e6					stx BRK_SAVE_X
.e23d	a5 f1			lda $f1					lda IRQ_SAVE_A
.e23f	85 e5			sta $e5					sta BRK_SAVE_A

.e241	28				plp						plp

.e242	4c 66 e2		jmp $e266				jmp MONITOR

.e245									notBRK
												; not BRK. was it keyboard input?
.e245	ad 00 dc		lda $dc00		        lda TERMIO_IREADY
.e248	f0 03			beq $e24d				beq notKBD

.e24a	20 57 e2		jsr $e257				jsr kHandleKBD

.e24d									notKBD
.e24d	a6 f4			ldx $f4					ldx IRQ_SAVE_SP
.e24f	9a				txs						txs
.e250	a4 f3			ldy $f3					ldy IRQ_SAVE_Y	; restore registers and return
.e252	a6 f2			ldx $f2					ldx IRQ_SAVE_X
.e254	a5 f1			lda $f1					lda IRQ_SAVE_A

.e256	40				rti					    rti

										;*****************************************************************************
										; Function:		kHandleKBD
										; Description:	Keyboard interrupt handler
										; Input:		Nothing
										; Changes:		a,x
										; Returns:		Nothing
										;*****************************************************************************
.e257									kHandleKBD .block
.e257	ad 01 dc		lda $dc01				lda TERMIO_IDATA
.e25a	a6 ee			ldx $ee					ldx KBD_WPTR
.e25c	9d 00 dd		sta $dd00,x				sta KBD_BUFFER,x
.e25f	e6 ee			inc $ee					inc KBD_WPTR
.e261	9c 00 dc		stz $dc00				stz TERMIO_IREADY

.e264	60				rts						rts
												.endblock
												.endblock


										;*****************************************************************************
										; NMI handler. Just do nothing.
										;*****************************************************************************
.e265									DONMI
.e265	40				rti						rti

												.include "monitor.asm"

;******  Processing file: /Users/davidhunt/Projects/dputer2/src/kernel/monitor.asm

										;*****************************************************************************
										; monitor.asm
										; 	(included by kernel.asm)
										;*****************************************************************************

.e266									MONITOR .block
.e266	58				cli						cli
												; are we here due to BRK instruction?
.e267	a5 f8			lda $f8					lda MON_COLD_START
.e269	f0 04			beq $e26f				beq monitor1
.e26b	a9 00			lda #$00				lda #0
.e26d	85 f8			sta $f8					sta MON_COLD_START
												;jmp $0200

.e26f									monitor1
.e26f	a5 ec			lda $ec					lda MON_FROM_BRK
.e271	f0 0d			beq $e280				beq cmdLoop

												; in a BRK, so display CPU status
.e273	20 93 e2		jsr $e293				jsr displayBrkStatus
.e276	a5 e9			lda $e9					lda BRK_PC_VECTOR
.e278	85 e1			sta $e1					sta MON_ADDR_VECTOR
.e27a	a5 ea			lda $ea					lda BRK_PC_VECTOR+1
.e27c	85 e2			sta $e2					sta MON_ADDR_VECTOR+1
.e27e	64 ec			stz $ec					stz MON_FROM_BRK

.e280									cmdLoop
.e280	20 28 f2		jsr $f228				jsr MPutStr
>e283	0a 3d 3d 3e 20 00						.null $0a,"==> "

.e289	20 a1 e0		jsr $e0a1				jsr KGETSTR
.e28c	f0 f2			beq $e280				beq cmdLoop

.e28e	20 4e e3		jsr $e34e				jsr processCommand

.e291	80 ed			bra $e280				bra cmdLoop

.e293									displayBrkStatus .proc
.e293	20 28 f2		jsr $f228				jsr MPutStr
>e296	0a 62 72 65 61 6b 70 6f					.text $0a,"breakpoint"
>e29e	69 6e 74
>e2a1	0a 50 43 20 20 20 20 42					.text $0a,"PC    BYTES   A   X   Y   SP  NVuBDIZC"
>e2a9	59 54 45 53 20 20 20 41 20 20 20 58 20 20 20 59
>e2b9	20 20 20 53 50 20 20 4e 56 75 42 44 49 5a 43
>e2c8	0a 2d 2d 2d 2d 20 20 2d					.null $0a,"----  ------  --  --  --  --  --------",$0a
>e2d0	2d 2d 2d 2d 2d 20 20 2d 2d 20 20 2d 2d 20 20 2d
>e2e0	2d 20 20 2d 2d 20 20 2d 2d 2d 2d 2d 2d 2d 2d 0a
>e2f0	00

.e2f1	a5 ea			lda $ea					lda BRK_PC_VECTOR+1
.e2f3	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e2f6	a5 e9			lda $e9					lda BRK_PC_VECTOR
.e2f8	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e2fb	20 20 f2		jsr $f220				jsr writeSpace
.e2fe	20 20 f2		jsr $f220				jsr writeSpace

.e301	a0 00			ldy #$00				ldy #$00
.e303	b1 e9			lda ($e9),y				lda (BRK_PC_VECTOR),y
.e305	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e308	20 20 f2		jsr $f220				jsr writeSpace

.e30b	c8				iny						iny
.e30c	b1 e9			lda ($e9),y				lda (BRK_PC_VECTOR),y
.e30e	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e311	20 20 f2		jsr $f220				jsr writeSpace
.e314	20 20 f2		jsr $f220				jsr writeSpace
.e317	20 20 f2		jsr $f220				jsr writeSpace

.e31a	a5 e5			lda $e5					lda BRK_SAVE_A
.e31c	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e31f	20 20 f2		jsr $f220				jsr writeSpace
.e322	20 20 f2		jsr $f220				jsr writeSpace

.e325	a5 e6			lda $e6					lda BRK_SAVE_X
.e327	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e32a	20 20 f2		jsr $f220				jsr writeSpace
.e32d	20 20 f2		jsr $f220				jsr writeSpace

.e330	a5 e7			lda $e7					lda BRK_SAVE_Y
.e332	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e335	20 20 f2		jsr $f220				jsr writeSpace
.e338	20 20 f2		jsr $f220				jsr writeSpace

.e33b	a5 e8			lda $e8					lda BRK_SAVE_SP
.e33d	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e340	20 20 f2		jsr $f220				jsr writeSpace
.e343	20 20 f2		jsr $f220				jsr writeSpace

.e346	a5 eb			lda $eb					lda BRK_STATUS_REG
.e348	20 c8 f1		jsr $f1c8				jsr MWriteBinaryByte

.e34b	4c 13 e1		jmp $e113				jmp KWRITECRLF
												.endproc


.e34e									processCommand .proc
.e34e	a2 00			ldx #$00				ldx #$00

.e350									nextCommandChar
.e350	e0 ff			cpx #$ff				cpx #INPUT_BUFFER_LEN
.e352	f0 44			beq $e398				beq done

.e354	a9 00			lda #$00				lda #$00
.e356	dd 00 de		cmp $de00,x				cmp INPUT_BUFFER,x
.e359	f0 3d			beq $e398				beq done

.e35b	a9 20			lda #$20				lda #$20
.e35d	dd 00 de		cmp $de00,x				cmp INPUT_BUFFER,x
.e360	d0 03			bne $e365				bne notSpace

.e362	e8				inx						inx
.e363	80 eb			bra $e350				bra nextCommandChar

.e365									notSpace
.e365	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.e368	20 a9 e3		jsr $e3a9				jsr lookupCommand
.e36b	f0 05			beq $e372				beq badCommand

.e36d	20 99 e3		jsr $e399				jsr doCommand

.e370	80 26			bra $e398				bra done

.e372									badCommand
.e372	20 28 f2		jsr $f228				jsr MPutStr
>e375	2a 2a 2a 20 69 6e 76 61					.null "*** invalid command - "
>e37d	6c 69 64 20 63 6f 6d 6d 61 6e 64 20 2d 20 00

.e38c	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.e38f	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e392	20 13 e1		jsr $e113				jsr KWRITECRLF
.e395	4c 56 ef		jmp $ef56				jmp doHelp

.e398									done
.e398	60				rts						rts

.e399									doCommand
.e399	c8				iny						iny
.e39a	b9 c4 e3		lda $e3c4,y				lda commands,y
.e39d	85 df			sta $df					sta MON_CMD_VECTOR
.e39f	c8				iny						iny
.e3a0	b9 c4 e3		lda $e3c4,y				lda commands,y
.e3a3	85 e0			sta $e0					sta MON_CMD_VECTOR+1
.e3a5	6c df 00		jmp ($00df)				jmp (MON_CMD_VECTOR)

.e3a8	60				rts						rts

.e3a9									lookupCommand .proc
.e3a9	a0 00			ldy #$00				ldy #$00

.e3ab									checkCommandChar
.e3ab	d9 c4 e3		cmp $e3c4,y				cmp commands,y
.e3ae	d0 04			bne $e3b4				bne nextCommand
.e3b0	a9 01			lda #$01				lda #$01
.e3b2	80 0f			bra $e3c3				bra done

.e3b4									nextCommand
.e3b4	48				pha						pha
.e3b5	b9 c4 e3		lda $e3c4,y				lda commands,y
.e3b8	f0 06			beq $e3c0				beq endOfList

.e3ba	68				pla						pla

.e3bb	c8				iny						iny
.e3bc	c8				iny						iny
.e3bd	c8				iny						iny
.e3be	80 eb			bra $e3ab				bra checkCommandChar

.e3c0									endOfList
.e3c0	68				pla						pla
.e3c1	a9 00			lda #$00				lda #$00

.e3c3									done
.e3c3	60				rts						rts
												.endproc

.e3c4									commands
>e3c4	71										.byte 'q'
>e3c5	e5 e3									.word doQuit
>e3c7	77										.byte 'w'
>e3c8	e6 e3									.word doWrite
>e3ca	6d										.byte 'm'
>e3cb	4a e4									.word doMem
>e3cd	6a										.byte 'j'
>e3ce	d1 e4									.word doJump
>e3d0	63										.byte 'c'
>e3d1	04 e5									.word doContinue
>e3d3	62										.byte 'b'
>e3d4	27 e5									.word doBreakpoint
>e3d6	64										.byte 'd'
>e3d7	64 e5									.word doDisassemble
>e3d9	6c										.byte 'l'
>e3da	28 ee									.word doLoad
>e3dc	74										.byte 't'
>e3dd	42 ef									.word doTest
>e3df	68										.byte 'h'
>e3e0	56 ef									.word doHelp
>e3e2	00										.byte $00
>e3e3	56 ef									.word doHelp

.e3e5									doQuit .proc
.e3e5	db				stp						hlt
												.endproc

.e3e6									doWrite .proc
.e3e6	20 e1 f1		jsr $f1e1				jsr skipToNextToken
.e3e9	b0 05			bcs $e3f0				bcs doWriteBadAddress

.e3eb	20 8b f1		jsr $f18b				jsr getHexAddr
.e3ee	90 1d			bcc $e40d				bcc doWrite2

.e3f0									doWriteBadAddress
.e3f0	20 28 f2		jsr $f228				jsr MPutStr
>e3f3	62 61 64 20 6f 72 20 6d					.null "bad or missing address",$0a
>e3fb	69 73 73 69 6e 67 20 61 64 64 72 65 73 73 0a 00

.e40b	80 3c			bra $e449				bra doWriteEnd

.e40d									doWrite2
.e40d	a5 f5			lda $f5					lda HEX_ADDR_BUFFER
.e40f	85 e1			sta $e1					sta MON_ADDR_VECTOR
.e411	a5 f6			lda $f6					lda HEX_ADDR_BUFFER+1
.e413	85 e2			sta $e2					sta MON_ADDR_VECTOR+1

.e415	a0 00			ldy #$00				ldy #$00

.e417									doWrite3
.e417	20 e1 f1		jsr $f1e1				jsr skipToNextToken
.e41a	b0 2d			bcs $e449				bcs doWriteEnd

.e41c	20 63 f1		jsr $f163				jsr getHexByte
.e41f	90 15			bcc $e436				bcc doWrite4

.e421	20 28 f2		jsr $f228				jsr MPutStr
>e424	69 6e 63 6f 6d 70 6c 65					.null "incomplete byte"
>e42c	74 65 20 62 79 74 65 00

.e434	80 13			bra $e449				bra doWriteEnd

.e436									doWrite4
.e436	a5 f7			lda $f7					lda HEX_BYTE_BUFFER
.e438	91 e1			sta ($e1),y				sta (MON_ADDR_VECTOR),y

.e43a	a9 01			lda #$01				lda #$01
.e43c	18				clc						clc
.e43d	65 e1			adc $e1					adc MON_ADDR_VECTOR
.e43f	85 e1			sta $e1					sta MON_ADDR_VECTOR
.e441	a9 00			lda #$00				lda #$00
.e443	65 e2			adc $e2					adc MON_ADDR_VECTOR+1
.e445	85 e2			sta $e2					sta MON_ADDR_VECTOR+1

.e447	80 ce			bra $e417				bra doWrite3

.e449									doWriteEnd
.e449	60				rts						rts
												.endproc

.e44a									doMem .proc
.e44a	20 e1 f1		jsr $f1e1				jsr skipToNextToken
.e44d	b0 1f			bcs $e46e				bcs doMemHaveAddr

.e44f	20 8b f1		jsr $f18b				jsr getHexAddr
.e452	90 12			bcc $e466				bcc doMemGotAddr

.e454									doMemBadAddress
.e454	20 28 f2		jsr $f228				jsr MPutStr
>e457	62 61 64 20 61 64 64 72					.null "bad address",$0a
>e45f	65 73 73 0a 00

.e464	80 6a			bra $e4d0				bra doMemEnd

.e466									doMemGotAddr
.e466	a5 f5			lda $f5					lda HEX_ADDR_BUFFER
.e468	85 e1			sta $e1					sta MON_ADDR_VECTOR
.e46a	a5 f6			lda $f6					lda HEX_ADDR_BUFFER+1
.e46c	85 e2			sta $e2					sta MON_ADDR_VECTOR+1

.e46e									doMemHaveAddr
.e46e	a2 10			ldx #$10				ldx #$10

.e470									doMemLoopRow
.e470	a0 00			ldy #$00				ldy #$00

.e472	a5 e2			lda $e2					lda MON_ADDR_VECTOR+1
.e474	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e477	a5 e1			lda $e1					lda MON_ADDR_VECTOR
.e479	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e47c	a9 20			lda #$20				lda #$20
.e47e	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e481									doMemLoopCol
.e481	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e483	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e486	c8				iny						iny
.e487	c0 10			cpy #$10				cpy #$10
.e489	f0 0e			beq $e499				beq doMemEndRow

.e48b	a9 20			lda #$20				lda #$20
.e48d	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e490	c0 08			cpy #$08				cpy #$08
.e492	d0 ed			bne $e481				bne doMemLoopCol

.e494	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e497	80 e8			bra $e481				bra doMemLoopCol

.e499									doMemEndRow
.e499	a9 20			lda #$20				lda #$20
.e49b	a0 00			ldy #$00				ldy #$00
.e49d	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e4a0	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e4a3									doMemEndRowLoop
.e4a3	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e4a5	c9 20			cmp #$20				cpa #32
.e4a7	b0 02			bcs $e4ab				bge doMemEndRow1
.e4a9	a9 2e			lda #$2e				lda #'.'
.e4ab									doMemEndRow1
.e4ab	c9 80			cmp #$80				cpa #128
.e4ad	90 02			bcc $e4b1				blt domemEndRow2
.e4af	a9 2e			lda #$2e				lda #'.'
.e4b1									doMemEndRow2
.e4b1	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e4b4	c8				iny						iny
.e4b5	c0 10			cpy #$10				cpy #$10
.e4b7	f0 02			beq $e4bb				beq doMemDoneRow
.e4b9	80 e8			bra $e4a3				bra doMemEndRowLoop
.e4bb									doMemDoneRow
.e4bb	20 13 e1		jsr $e113				jsr KWRITECRLF

.e4be	a9 10			lda #$10				lda #$10
.e4c0	18				clc						clc
.e4c1	65 e1			adc $e1					adc MON_ADDR_VECTOR
.e4c3	85 e1			sta $e1					sta MON_ADDR_VECTOR
.e4c5	a9 00			lda #$00				lda #$00
.e4c7	65 e2			adc $e2					adc MON_ADDR_VECTOR+1
.e4c9	85 e2			sta $e2					sta MON_ADDR_VECTOR+1

.e4cb	ca				dex						dex
.e4cc	f0 02			beq $e4d0				beq doMemEnd

.e4ce	80 a0			bra $e470				bra doMemLoopRow

.e4d0									doMemEnd
.e4d0	60				rts						rts
												.endproc

.e4d1									doJump .proc
.e4d1	20 e1 f1		jsr $f1e1				jsr skipToNextToken
.e4d4	b0 05			bcs $e4db				bcs doJumpBadAddress

.e4d6	20 8b f1		jsr $f18b				jsr getHexAddr
.e4d9	90 1d			bcc $e4f8				bcc doJump2

.e4db									doJumpBadAddress
.e4db	20 28 f2		jsr $f228				jsr MPutStr
>e4de	62 61 64 20 6f 72 20 6d					.null "bad or missing address",$0a
>e4e6	69 73 73 69 6e 67 20 61 64 64 72 65 73 73 0a 00

.e4f6	80 0b			bra $e503				bra doJumpEnd

.e4f8									doJump2
.e4f8	a5 f5			lda $f5					lda HEX_ADDR_BUFFER
.e4fa	85 e1			sta $e1					sta MON_ADDR_VECTOR
.e4fc	a5 f6			lda $f6					lda HEX_ADDR_BUFFER+1
.e4fe	85 e2			sta $e2					sta MON_ADDR_VECTOR+1

.e500	6c e1 00		jmp ($00e1)				jmp (MON_ADDR_VECTOR)

.e503									doJumpEnd
.e503	60				rts						rts
												.endproc

.e504									doContinue .proc
.e504	18				clc						clc
.e505	a5 e9			lda $e9					lda BRK_PC_VECTOR
.e507	69 02			adc #$02				adc #$02
.e509	85 e9			sta $e9					sta BRK_PC_VECTOR
.e50b	a5 ea			lda $ea					lda BRK_PC_VECTOR+1
.e50d	69 00			adc #$00				adc #$00
.e50f	85 ea			sta $ea					sta BRK_PC_VECTOR+1

.e511	a6 e8			ldx $e8					ldx BRK_SAVE_SP
.e513	9a				txs						txs
.e514	68				pla						pla						; SP on BRK was pointing after status and return addr
.e515	68				pla						pla						; so throw away the junk that is there
.e516	68				pla						pla

.e517	a5 ea			lda $ea					lda BRK_PC_VECTOR+1
.e519	48				pha						pha
.e51a	a5 e9			lda $e9					lda BRK_PC_VECTOR
.e51c	48				pha						pha
.e51d	a5 eb			lda $eb					lda BRK_STATUS_REG
.e51f	48				pha						pha

.e520	a5 e5			lda $e5					lda BRK_SAVE_A
.e522	a6 e6			ldx $e6					ldx BRK_SAVE_X
.e524	a4 e7			ldy $e7					ldy BRK_SAVE_Y

.e526	40				rti						rti
												.endproc

.e527									doBreakpoint .proc
.e527	20 e1 f1		jsr $f1e1				jsr skipToNextToken
.e52a	b0 02			bcs $e52e				bcs doBreakpointToggle

												; process breakpoint arguments
												; 	b
												;		toggle breakpoint enable
												; 	b number
												;		remove breakpoint #number
												;			restore addr/addr+1 from breakpoint table
												;			remove from table
												;			error if breakpoint #number not in use
												; 	b number addr
												;		add breakpoint #number at addr
												; 			save bytes at addr/addr+1 to breakpoint table
												;			write BRK number at addr/addr+1
												;			error if breakpoint table entry already used
												; **** will need to modify doContinue
												; ****		lookup BRK_PC_VECTOR in table
												; ****		if not found, don't modify memory
												; ****		if found, restore memory and remove from table

.e52c	80 35			bra $e563				bra doBreakpointEnd

.e52e									doBreakpointToggle
.e52e	a9 01			lda #$01				lda #$01
.e530	45 ed			eor $ed					eor MON_BP_ENABLE
.e532	85 ed			sta $ed					sta MON_BP_ENABLE

.e534	20 28 f2		jsr $f228				jsr MPutStr
>e537	62 72 65 61 6b 70 6f 69					.null "breakpoints "
>e53f	6e 74 73 20 00

.e544	a5 ed			lda $ed					lda MON_BP_ENABLE
.e546	f0 0e			beq $e556				beq doBreakPointDisabled

.e548	20 28 f2		jsr $f228				jsr MPutStr
>e54b	65 6e 61 62 6c 65 64 0a					.null "enabled",$0a
>e553	00

.e554	80 0d			bra $e563				bra doBreakpointEnd

.e556									doBreakPointDisabled
.e556	20 28 f2		jsr $f228				jsr MPutStr
>e559	64 69 73 61 62 6c 65 64					.null "disabled",$0a
>e561	0a 00

.e563									doBreakpointEnd
.e563	60				rts						rts
												.endproc

.e564									doDisassemble .proc
.e564	20 e1 f1		jsr $f1e1				jsr skipToNextToken
.e567	b0 1f			bcs $e588				bcs doDisassembleHaveAddr

.e569	20 8b f1		jsr $f18b				jsr getHexAddr
.e56c	90 12			bcc $e580				bcc doDisassembleGotAddr

.e56e									doDisassembleBadAddress
.e56e	20 28 f2		jsr $f228				jsr MPutStr
>e571	62 61 64 20 61 64 64 72					.null "bad address",$0a
>e579	65 73 73 0a 00

.e57e	80 1f			bra $e59f				bra doDisassembleEnd

.e580									doDisassembleGotAddr
.e580	a5 f5			lda $f5					lda HEX_ADDR_BUFFER
.e582	85 e1			sta $e1					sta MON_ADDR_VECTOR
.e584	a5 f6			lda $f6					lda HEX_ADDR_BUFFER+1
.e586	85 e2			sta $e2					sta MON_ADDR_VECTOR+1

.e588									doDisassembleHaveAddr
.e588	a2 14			ldx #$14				ldx #$14

.e58a									doDisassembleLoop
.e58a	da				phx						phx
.e58b	20 a0 e5		jsr $e5a0				jsr Disassemble
.e58e	fa				plx						plx
.e58f	ca				dex						dex
.e590	f0 0d			beq $e59f				beq doDisassembleEnd

.e592	18				clc						clc
.e593	65 e1			adc $e1					adc MON_ADDR_VECTOR
.e595	85 e1			sta $e1					sta MON_ADDR_VECTOR
.e597	a9 00			lda #$00				lda #$00
.e599	65 e2			adc $e2					adc MON_ADDR_VECTOR+1
.e59b	85 e2			sta $e2					sta MON_ADDR_VECTOR+1

.e59d	80 eb			bra $e58a				bra doDisassembleLoop

.e59f									doDisassembleEnd
.e59f	60				rts						rts

.e5a0									Disassemble .proc
.e5a0	a5 e2			lda $e2					lda MON_ADDR_VECTOR+1		; output pc
.e5a2	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e5a5	a5 e1			lda $e1					lda MON_ADDR_VECTOR
.e5a7	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e5aa	20 20 f2		jsr $f220				jsr WriteSpace

.e5ad	b2 e1			lda ($e1)				lda (MON_ADDR_VECTOR)		; save opcode
.e5af	85 f0			sta $f0					sta MON_OPCODE

.e5b1	85 e3			sta $e3					sta MON_OPCODE_VECTOR		; calculate offset into opcode table
.e5b3	64 e4			stz $e4					stz MON_OPCODE_VECTOR+1

.e5b5	18				clc						clc
.e5b6	06 e3			asl $e3					asl MON_OPCODE_VECTOR
.e5b8	26 e4			rol $e4					rol MON_OPCODE_VECTOR+1		; opcode * 2

.e5ba	18				clc						clc
.e5bb	a5 f0			lda $f0					lda MON_OPCODE
.e5bd	65 e3			adc $e3					adc MON_OPCODE_VECTOR
.e5bf	85 e3			sta $e3					sta MON_OPCODE_VECTOR
.e5c1	a9 00			lda #$00				lda #$0
.e5c3	65 e4			adc $e4					adc MON_OPCODE_VECTOR+1
.e5c5	85 e4			sta $e4					sta MON_OPCODE_VECTOR+1		; opcode * 3

.e5c7	18				clc						clc
.e5c8	06 e3			asl $e3					asl MON_OPCODE_VECTOR
.e5ca	26 e4			rol $e4					rol MON_OPCODE_VECTOR+1		; opcode * 6

.e5cc	18				clc						clc							; calculate absolute address in opcode tbl
.e5cd	a9 28			lda #$28				lda #<opcodes
.e5cf	65 e3			adc $e3					adc MON_OPCODE_VECTOR
.e5d1	85 e3			sta $e3					sta MON_OPCODE_VECTOR
.e5d3	a9 e8			lda #$e8				lda #>opcodes
.e5d5	65 e4			adc $e4					adc MON_OPCODE_VECTOR+1
.e5d7	85 e4			sta $e4					sta MON_OPCODE_VECTOR+1

.e5d9	a0 05			ldy #$05				ldy #$05
.e5db	b1 e3			lda ($e3),y				lda (MON_OPCODE_VECTOR),y	; instruction length
.e5dd	aa				tax						tax

.e5de	a0 00			ldy #$00				ldy #$00
.e5e0	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y		; opcode
.e5e2	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e5e5	20 20 f2		jsr $f220				jsr writeSpace

.e5e8	ca				dex						dex
.e5e9	f0 15			beq $e600				beq bytesDone

.e5eb	c8				iny						iny
.e5ec	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y		; operand 1
.e5ee	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e5f1	20 20 f2		jsr $f220				jsr writeSpace

.e5f4	ca				dex						dex
.e5f5	f0 09			beq $e600				beq bytesDone

.e5f7	c8				iny						iny
.e5f8	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y		; operand 2
.e5fa	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e5fd	20 20 f2		jsr $f220				jsr writeSpace

.e600									bytesDone
.e600	a0 05			ldy #$05				ldy #$05					; add spaces to account for < 2 operands
.e602	a9 03			lda #$03				lda #$03
.e604	38				sec						sec
.e605	f1 e3			sbc ($e3),y				sbc (MON_OPCODE_VECTOR),y
.e607	aa				tax						tax
.e608	f0 0c			beq $e616				beq spacesDone

.e60a									spacesLoop
.e60a	20 20 f2		jsr $f220				jsr writeSpace
.e60d	20 20 f2		jsr $f220				jsr writeSpace
.e610	20 20 f2		jsr $f220				jsr writeSpace
.e613	ca				dex						dex
.e614	d0 f4			bne $e60a				bne spacesLoop

.e616									spacesDone
.e616	a6 e3			ldx $e3					ldx MON_OPCODE_VECTOR		; output instruction mnemonic
.e618	a4 e4			ldy $e4					ldy MON_OPCODE_VECTOR+1
.e61a	20 f4 e0		jsr $e0f4				jsr KWRITESTR
.e61d	20 20 f2		jsr $f220				jsr writeSpace

.e620	a0 04			ldy #$04				ldy #$04
.e622	b1 e3			lda ($e3),y				lda (MON_OPCODE_VECTOR),y	; get addressing mode
.e624	20 2d e6		jsr $e62d				jsr handleAddrMode			; output instruction operands
.e627	c8				iny						iny
.e628	b1 e3			lda ($e3),y				lda (MON_OPCODE_VECTOR),y	; get instruction length
.e62a	4c 13 e1		jmp $e113				jmp KWRITECRLF

.e62d									handleAddrMode
.e62d	c9 01			cmp #$01				cmp #AM_ACCUMULATOR
.e62f	d0 03			bne $e634				bne checkAbsolute

												; xxx
.e631	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e634									checkAbsolute
.e634	c9 02			cmp #$02				cmp #AM_ABSOLUTE
.e636	d0 17			bne $e64f				bne checkAbsoluteX

												; xxx $hilo
.e638	5a				phy						phy

.e639	a9 24			lda #$24				lda #'$'
.e63b	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e63e	a0 02			ldy #$02				ldy #$02
.e640	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e642	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e645	88				dey						dey
.e646	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e648	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e64b	7a				ply						ply
.e64c	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e64f									checkAbsoluteX
.e64f	c9 03			cmp #$03				cmp #AM_ABSOLUTE_X
.e651	d0 21			bne $e674				bne checkAbsoluteY

												; xxx $hilo,x
.e653	5a				phy						phy

.e654	a9 24			lda #$24				lda #'$'
.e656	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e659	a0 02			ldy #$02				ldy #$02
.e65b	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e65d	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e660	88				dey						dey
.e661	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e663	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e666	a9 2c			lda #$2c				lda #','
.e668	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e66b	a9 78			lda #$78				lda #'x'
.e66d	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e670	7a				ply						ply
.e671	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e674									checkAbsoluteY
.e674	c9 04			cmp #$04				cmp #AM_ABSOLUTE_Y
.e676	d0 21			bne $e699				bne checkImmediate

												; xxx $hilo,y
.e678	5a				phy						phy

.e679	a9 24			lda #$24				lda #'$'
.e67b	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e67e	a0 02			ldy #$02				ldy #$02
.e680	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e682	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e685	88				dey						dey
.e686	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e688	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e68b	a9 2c			lda #$2c				lda #','
.e68d	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e690	a9 79			lda #$79				lda #'y'
.e692	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e695	7a				ply						ply
.e696	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e699									checkImmediate
.e699	c9 05			cmp #$05				cmp #AM_IMMEDIATE
.e69b	d0 16			bne $e6b3				bne checkImplied

												; xxx #$bb
.e69d	5a				phy						phy

.e69e	a9 23			lda #$23				lda #'#'
.e6a0	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e6a3	a9 24			lda #$24				lda #'$'
.e6a5	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e6a8	a0 01			ldy #$01				ldy #$01
.e6aa	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e6ac	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e6af	7a				ply						ply
.e6b0	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e6b3									checkImplied
.e6b3	c9 06			cmp #$06				cmp #AM_IMPLIED
.e6b5	d0 03			bne $e6ba				bne checkIndirect

												; xxx
.e6b7	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e6ba									checkIndirect
.e6ba	c9 07			cmp #$07				cmp #AM_INDIRECT
.e6bc	d0 21			bne $e6df				bne checkXIdxIndir

												; xxx ($hilo)
.e6be	5a				phy						phy

.e6bf	a9 28			lda #$28				lda #'('
.e6c1	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e6c4	a9 24			lda #$24				lda #'$'
.e6c6	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e6c9	a0 02			ldy #$02				ldy #$02
.e6cb	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e6cd	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e6d0	88				dey						dey
.e6d1	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e6d3	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e6d6	a9 29			lda #$29				lda #')'
.e6d8	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e6db	7a				ply						ply
.e6dc	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e6df									checkXIdxIndir
.e6df	c9 08			cmp #$08				cmp #AM_X_IDX_INDIR
.e6e1	d0 25			bne $e708				bne checkIndirYIdx

												; xxx ($zp,x)
.e6e3	5a				phy						phy

.e6e4	a9 28			lda #$28				lda #'('
.e6e6	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e6e9	a9 24			lda #$24				lda #'$'
.e6eb	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e6ee	a0 01			ldy #$01				ldy #$01
.e6f0	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e6f2	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e6f5	a9 2c			lda #$2c				lda #','
.e6f7	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e6fa	a9 78			lda #$78				lda #'x'
.e6fc	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e6ff	a9 29			lda #$29				lda #')'
.e701	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e704	7a				ply						ply
.e705	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e708									checkIndirYIdx
.e708	c9 09			cmp #$09				cmp #AM_INDIR_Y_IDX
.e70a	d0 25			bne $e731				bne checkRelative

												; xxx ($zp),y
.e70c	5a				phy						phy

.e70d	a9 28			lda #$28				lda #'('
.e70f	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e712	a9 24			lda #$24				lda #'$'
.e714	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e717	a0 01			ldy #$01				ldy #$01
.e719	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e71b	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e71e	a9 29			lda #$29				lda #')'
.e720	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e723	a9 2c			lda #$2c				lda #','
.e725	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e728	a9 79			lda #$79				lda #'y'
.e72a	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e72d	7a				ply						ply
.e72e	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e731									checkRelative
.e731	c9 0a			cmp #$0a				cmp #AM_RELATIVE
.e733	d0 44			bne $e779				bne checkZeroPage

												; xxx $ro => xxx $hilo
.e735	5a				phy						phy

.e736	a9 24			lda #$24				lda #'$'
.e738	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e73b	a0 01			ldy #$01				ldy #$01
.e73d	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e73f	10 16			bpl $e757				bpl forwardBranch

.e741	49 ff			eor #$ff				eor #$ff				; backard relative branch
.e743	18				clc						clc
.e744	69 01			adc #$01				adc #$1
.e746	38				sec						sec
.e747	85 d4			sta $d4					sta T1_VECTOR
.e749	a5 e1			lda $e1					lda MON_ADDR_VECTOR
.e74b	e5 d4			sbc $d4					sbc T1_VECTOR
.e74d	85 d4			sta $d4					sta T1_VECTOR
.e74f	a5 e2			lda $e2					lda MON_ADDR_VECTOR+1
.e751	e9 00			sbc #$00				sbc #$0
.e753	85 d5			sta $d5					sta T1_VECTOR+1
.e755	80 0b			bra $e762				bra adjustRelativeVector

.e757									forwardBranch
.e757	18				clc						clc						; forward relative branch
.e758	65 e1			adc $e1					adc MON_ADDR_VECTOR
.e75a	85 d4			sta $d4					sta T1_VECTOR
.e75c	a5 e2			lda $e2					lda MON_ADDR_VECTOR+1
.e75e	69 00			adc #$00				adc #$0
.e760	85 d5			sta $d5					sta T1_VECTOR+1

.e762									adjustRelativeVector
.e762	18				clc						clc						; add 2 to get correct branch addr
.e763	a5 d4			lda $d4					lda T1_VECTOR
.e765	69 02			adc #$02				adc #$02
.e767	85 d4			sta $d4					sta T1_VECTOR
.e769	a5 d5			lda $d5					lda T1_VECTOR+1
.e76b	69 00			adc #$00				adc #$00
.e76d	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e770	a5 d4			lda $d4					lda T1_VECTOR
.e772	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e775									didRelative
.e775	7a				ply						ply
.e776	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e779									checkZeroPage
.e779	c9 0b			cmp #$0b				cmp #AM_ZEROPAGE
.e77b	d0 11			bne $e78e				bne checkZeroPageX

												; xxx $zp
.e77d	5a				phy						phy

.e77e	a9 24			lda #$24				lda #'$'
.e780	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e783	a0 01			ldy #$01				ldy #$01
.e785	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e787	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e78a	7a				ply						ply
.e78b	4c 27 e8		jmp $e827				jmp handleAddrModeDone

.e78e									checkZeroPageX
.e78e	c9 0c			cmp #$0c				cmp #AM_ZEROPAGE_X
.e790	d0 1a			bne $e7ac				bne checkZeroPageY

												; xxx $zp,x
.e792	5a				phy						phy

.e793	a9 24			lda #$24				lda #'$'
.e795	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e798	a0 01			ldy #$01				ldy #$01
.e79a	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e79c	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e79f	a9 2c			lda #$2c				lda #','
.e7a1	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e7a4	a9 78			lda #$78				lda #'x'
.e7a6	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e7a9	7a				ply						ply
.e7aa	80 7b			bra $e827				bra handleAddrModeDone

.e7ac									checkZeroPageY
.e7ac	c9 0d			cmp #$0d				cmp #AM_ZEROPAGE_Y
.e7ae	d0 1a			bne $e7ca				bne checkAbsIdxInd

												; xxx $zp,y
.e7b0	5a				phy						phy

.e7b1	a9 24			lda #$24				lda #'$'
.e7b3	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e7b6	a0 01			ldy #$01				ldy #$01
.e7b8	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e7ba	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e7bd	a9 2c			lda #$2c				lda #','
.e7bf	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e7c2	a9 79			lda #$79				lda #'y'
.e7c4	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e7c7	7a				ply						ply
.e7c8	80 5d			bra $e827				bra handleAddrModeDone

.e7ca									checkAbsIdxInd
.e7ca	c9 0e			cmp #$0e				cmp #AM_ABS_IDX_IND
.e7cc	d0 2a			bne $e7f8				bne checkZeroPageInd

												; xxx ($hilo),x
.e7ce	5a				phy						phy

.e7cf	a9 28			lda #$28				lda #'('
.e7d1	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e7d4	a9 24			lda #$24				lda #'$'
.e7d6	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e7d9	a0 02			ldy #$02				ldy #$02
.e7db	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e7dd	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e7e0	88				dey						dey
.e7e1	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e7e3	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e7e6	a9 29			lda #$29				lda #')'
.e7e8	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e7eb	a9 2c			lda #$2c				lda #','
.e7ed	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e7f0	a9 78			lda #$78				lda #'x'
.e7f2	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e7f5	7a				ply						ply
.e7f6	80 2f			bra $e827				bra handleAddrModeDone

.e7f8									checkZeroPageInd
.e7f8	c9 0f			cmp #$0f				cmp #AM_ZEROPAGE_IND
.e7fa	d0 1a			bne $e816				bne unknownAddrMode

												; xxx ($zp)
.e7fc	5a				phy						phy

.e7fd	a9 28			lda #$28				lda #'('
.e7ff	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e802	a9 24			lda #$24				lda #'$'
.e804	20 e2 e0		jsr $e0e2				jsr KWRITETERM
.e807	a0 01			ldy #$01				ldy #$01
.e809	b1 e1			lda ($e1),y				lda (MON_ADDR_VECTOR),y
.e80b	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.e80e	a9 29			lda #$29				lda #')'
.e810	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.e813	7a				ply						ply
.e814	80 11			bra $e827				bra handleAddrModeDone

.e816									unknownAddrMode
.e816	20 28 f2		jsr $f228				jsr MPutStr
>e819	61 64 64 72 20 6d 6f 64					.null "addr mode "
>e821	65 20 00
.e824	20 b1 f1		jsr $f1b1				jsr MWriteHexByte

.e827									handleAddrModeDone
.e827	60				rts						rts

										; Addressing modes
=1										AM_ACCUMULATOR		= 1
=2										AM_ABSOLUTE			= 2
=3										AM_ABSOLUTE_X		= 3
=4										AM_ABSOLUTE_Y		= 4
=5										AM_IMMEDIATE		= 5
=6										AM_IMPLIED			= 6
=7										AM_INDIRECT			= 7
=8										AM_X_IDX_INDIR		= 8
=9										AM_INDIR_Y_IDX		= 9
=10										AM_RELATIVE			= 10
=11										AM_ZEROPAGE			= 11
=12										AM_ZEROPAGE_X		= 12
=13										AM_ZEROPAGE_Y		= 13
=14										AM_ABS_IDX_IND 		= 14
=15										AM_ZEROPAGE_IND		= 15

.e828									opcodes
>e828	62 72 6b 00								.null "brk"
>e82c	05 02									.byte AM_IMMEDIATE,2
>e82e	6f 72 61 00								.null "ora"
>e832	08 02									.byte AM_X_IDX_INDIR,2
>e834	42 41 44 00								.null "BAD"
>e838	06 01									.byte AM_IMPLIED,1
>e83a	42 41 44 00								.null "BAD"
>e83e	06 01									.byte AM_IMPLIED,1
>e840	42 41 44 00								.null "BAD"
>e844	06 01									.byte AM_IMPLIED,1
>e846	6f 72 61 00								.null "ora"
>e84a	0b 02									.byte AM_ZEROPAGE,2
>e84c	61 73 6c 00								.null "asl"
>e850	0b 02									.byte AM_ZEROPAGE,2
>e852	72 6d 62 00								.null "rmb"
>e856	0b 02									.byte AM_ZEROPAGE,2
>e858	70 68 70 00								.null "php"
>e85c	06 01									.byte AM_IMPLIED,1
>e85e	6f 72 61 00								.null "ora"
>e862	05 02									.byte AM_IMMEDIATE,2
>e864	61 73 6c 00								.null "asl"
>e868	01 01									.byte AM_ACCUMULATOR,1
>e86a	42 41 44 00								.null "BAD"
>e86e	06 01									.byte AM_IMPLIED,1
>e870	42 41 44 00								.null "BAD"
>e874	06 01									.byte AM_IMPLIED,1
>e876	6f 72 61 00								.null "ora"
>e87a	02 03									.byte AM_ABSOLUTE,3
>e87c	61 73 6c 00								.null "asl"
>e880	02 03									.byte AM_ABSOLUTE,3
>e882	42 41 44 00								.null "BAD"
>e886	06 01									.byte AM_IMPLIED,1
>e888	62 70 6c 00								.null "bpl"
>e88c	0a 02									.byte AM_RELATIVE,2
>e88e	6f 72 61 00								.null "ora"
>e892	09 02									.byte AM_INDIR_Y_IDX,2
>e894	6f 72 61 00								.null "ora"
>e898	0f 02									.byte AM_ZEROPAGE_IND,2
>e89a	42 41 44 00								.null "BAD"
>e89e	06 01									.byte AM_IMPLIED,1
>e8a0	42 41 44 00								.null "BAD"
>e8a4	06 01									.byte AM_IMPLIED,1
>e8a6	6f 72 61 00								.null "ora"
>e8aa	0c 02									.byte AM_ZEROPAGE_X,2
>e8ac	61 73 6c 00								.null "asl"
>e8b0	0c 02									.byte AM_ZEROPAGE_X,2
>e8b2	72 6d 62 00								.null "rmb"
>e8b6	0b 02									.byte AM_ZEROPAGE,2
>e8b8	63 6c 63 00								.null "clc"
>e8bc	06 01									.byte AM_IMPLIED,1
>e8be	6f 72 61 00								.null "ora"
>e8c2	04 03									.byte AM_ABSOLUTE_Y,3
>e8c4	42 41 44 00								.null "BAD"
>e8c8	06 01									.byte AM_IMPLIED,1
>e8ca	42 41 44 00								.null "BAD"
>e8ce	06 01									.byte AM_IMPLIED,1
>e8d0	42 41 44 00								.null "BAD"
>e8d4	06 01									.byte AM_IMPLIED,1
>e8d6	6f 72 61 00								.null "ora"
>e8da	03 03									.byte AM_ABSOLUTE_X,3
>e8dc	61 73 6c 00								.null "asl"
>e8e0	03 03									.byte AM_ABSOLUTE_X,3
>e8e2	42 41 44 00								.null "BAD"
>e8e6	06 01									.byte AM_IMPLIED,1
>e8e8	6a 73 72 00								.null "jsr"
>e8ec	02 03									.byte AM_ABSOLUTE,3
>e8ee	61 6e 64 00								.null "and"
>e8f2	08 02									.byte AM_X_IDX_INDIR,2
>e8f4	42 41 44 00								.null "BAD"
>e8f8	06 01									.byte AM_IMPLIED,1
>e8fa	42 41 44 00								.null "BAD"
>e8fe	06 01									.byte AM_IMPLIED,1
>e900	62 69 74 00								.null "bit"
>e904	0b 02									.byte AM_ZEROPAGE,2
>e906	61 6e 64 00								.null "and"
>e90a	0b 02									.byte AM_ZEROPAGE,2
>e90c	72 6f 6c 00								.null "rol"
>e910	0b 02									.byte AM_ZEROPAGE,2
>e912	72 6d 62 00								.null "rmb"
>e916	0b 02									.byte AM_ZEROPAGE,2
>e918	70 6c 70 00								.null "plp"
>e91c	06 01									.byte AM_IMPLIED,1
>e91e	61 6e 64 00								.null "and"
>e922	05 02									.byte AM_IMMEDIATE,2
>e924	72 6f 6c 00								.null "rol"
>e928	01 01									.byte AM_ACCUMULATOR,1
>e92a	42 41 44 00								.null "BAD"
>e92e	06 01									.byte AM_IMPLIED,1
>e930	62 69 74 00								.null "bit"
>e934	02 03									.byte AM_ABSOLUTE,3
>e936	61 62 73 00								.null "abs"
>e93a	02 03									.byte AM_ABSOLUTE,3
>e93c	72 6f 6c 00								.null "rol"
>e940	02 03									.byte AM_ABSOLUTE,3
>e942	42 41 44 00								.null "BAD"
>e946	06 01									.byte AM_IMPLIED,1
>e948	62 6d 69 00								.null "bmi"
>e94c	0a 02									.byte AM_RELATIVE,2
>e94e	61 6e 64 00								.null "and"
>e952	09 02									.byte AM_INDIR_Y_IDX,2
>e954	61 6e 64 00								.null "and"
>e958	0f 02									.byte AM_ZEROPAGE_IND,2
>e95a	42 41 44 00								.null "BAD"
>e95e	06 01									.byte AM_IMPLIED,1
>e960	62 69 74 00								.null "bit"
>e964	0c 02									.byte AM_ZEROPAGE_X,2
>e966	61 6e 64 00								.null "and"
>e96a	0c 02									.byte AM_ZEROPAGE_X,2
>e96c	72 6f 6c 00								.null "rol"
>e970	0c 02									.byte AM_ZEROPAGE_X,2
>e972	72 6d 62 00								.null "rmb"
>e976	0b 02									.byte AM_ZEROPAGE,2
>e978	73 65 63 00								.null "sec"
>e97c	06 01									.byte AM_IMPLIED,1
>e97e	61 6e 64 00								.null "and"
>e982	04 03									.byte AM_ABSOLUTE_Y,3
>e984	42 41 44 00								.null "BAD"
>e988	06 01									.byte AM_IMPLIED,1
>e98a	42 41 44 00								.null "BAD"
>e98e	06 01									.byte AM_IMPLIED,1
>e990	62 69 74 00								.null "bit"
>e994	03 03									.byte AM_ABSOLUTE_X,3
>e996	61 6e 64 00								.null "and"
>e99a	03 03									.byte AM_ABSOLUTE_X,3
>e99c	72 6f 6c 00								.null "rol"
>e9a0	03 03									.byte AM_ABSOLUTE_X,3
>e9a2	42 41 44 00								.null "BAD"
>e9a6	06 01									.byte AM_IMPLIED,1
>e9a8	72 74 69 00								.null "rti"
>e9ac	06 01									.byte AM_IMPLIED,1
>e9ae	65 6f 72 00								.null "eor"
>e9b2	08 02									.byte AM_X_IDX_INDIR,2
>e9b4	42 41 44 00								.null "BAD"
>e9b8	06 01									.byte AM_IMPLIED,1
>e9ba	42 41 44 00								.null "BAD"
>e9be	06 01									.byte AM_IMPLIED,1
>e9c0	42 41 44 00								.null "BAD"
>e9c4	06 01									.byte AM_IMPLIED,1
>e9c6	65 6f 72 00								.null "eor"
>e9ca	0b 02									.byte AM_ZEROPAGE,2
>e9cc	6c 73 72 00								.null "lsr"
>e9d0	0b 02									.byte AM_ZEROPAGE,2
>e9d2	72 6d 62 00								.null "rmb"
>e9d6	0b 02									.byte AM_ZEROPAGE,2
>e9d8	70 68 61 00								.null "pha"
>e9dc	06 01									.byte AM_IMPLIED,1
>e9de	65 6f 72 00								.null "eor"
>e9e2	05 02									.byte AM_IMMEDIATE,2
>e9e4	6c 73 72 00								.null "lsr"
>e9e8	01 01									.byte AM_ACCUMULATOR,1
>e9ea	42 41 44 00								.null "BAD"
>e9ee	06 01									.byte AM_IMPLIED,1
>e9f0	6a 6d 70 00								.null "jmp"
>e9f4	02 03									.byte AM_ABSOLUTE,3
>e9f6	65 6f 72 00								.null "eor"
>e9fa	02 03									.byte AM_ABSOLUTE,3
>e9fc	6c 73 72 00								.null "lsr"
>ea00	02 03									.byte AM_ABSOLUTE,3
>ea02	42 41 44 00								.null "BAD"
>ea06	06 01									.byte AM_IMPLIED,1
>ea08	62 76 63 00								.null "bvc"
>ea0c	0a 02									.byte AM_RELATIVE,2
>ea0e	65 6f 72 00								.null "eor"
>ea12	09 02									.byte AM_INDIR_Y_IDX,2
>ea14	65 6f 72 00								.null "eor"
>ea18	0f 02									.byte AM_ZEROPAGE_IND,2
>ea1a	42 41 44 00								.null "BAD"
>ea1e	06 01									.byte AM_IMPLIED,1
>ea20	42 41 44 00								.null "BAD"
>ea24	06 01									.byte AM_IMPLIED,1
>ea26	65 6f 72 00								.null "eor"
>ea2a	0c 02									.byte AM_ZEROPAGE_X,2
>ea2c	6c 73 72 00								.null "lsr"
>ea30	0c 02									.byte AM_ZEROPAGE_X,2
>ea32	72 6d 62 00								.null "rmb"
>ea36	0b 02									.byte AM_ZEROPAGE,2
>ea38	63 6c 69 00								.null "cli"
>ea3c	06 01									.byte AM_IMPLIED,1
>ea3e	65 6f 72 00								.null "eor"
>ea42	04 03									.byte AM_ABSOLUTE_Y,3
>ea44	70 68 79 00								.null "phy"
>ea48	06 01									.byte AM_IMPLIED,1
>ea4a	42 41 44 00								.null "BAD"
>ea4e	06 01									.byte AM_IMPLIED,1
>ea50	42 41 44 00								.null "BAD"
>ea54	06 01									.byte AM_IMPLIED,1
>ea56	65 6f 72 00								.null "eor"
>ea5a	03 03									.byte AM_ABSOLUTE_X,3
>ea5c	6c 73 72 00								.null "lsr"
>ea60	03 03									.byte AM_ABSOLUTE_X,3
>ea62	42 41 44 00								.null "BAD"
>ea66	06 01									.byte AM_IMPLIED,1
>ea68	72 74 73 00								.null "rts"
>ea6c	06 01									.byte AM_IMPLIED,1
>ea6e	61 64 63 00								.null "adc"
>ea72	08 02									.byte AM_X_IDX_INDIR,2
>ea74	42 41 44 00								.null "BAD"
>ea78	06 01									.byte AM_IMPLIED,1
>ea7a	42 41 44 00								.null "BAD"
>ea7e	06 01									.byte AM_IMPLIED,1
>ea80	73 74 7a 00								.null "stz"
>ea84	0b 02									.byte AM_ZEROPAGE,2
>ea86	61 64 63 00								.null "adc"
>ea8a	0b 02									.byte AM_ZEROPAGE,2
>ea8c	72 6f 72 00								.null "ror"
>ea90	0b 02									.byte AM_ZEROPAGE,2
>ea92	72 6d 62 00								.null "rmb"
>ea96	0b 02									.byte AM_ZEROPAGE,2
>ea98	70 6c 61 00								.null "pla"
>ea9c	06 01									.byte AM_IMPLIED,1
>ea9e	61 64 63 00								.null "adc"
>eaa2	05 02									.byte AM_IMMEDIATE,2
>eaa4	72 6f 72 00								.null "ror"
>eaa8	01 01									.byte AM_ACCUMULATOR,1
>eaaa	42 41 44 00								.null "BAD"
>eaae	06 01									.byte AM_IMPLIED,1
>eab0	6a 6d 70 00								.null "jmp"
>eab4	07 03									.byte AM_INDIRECT,3
>eab6	61 64 63 00								.null "adc"
>eaba	02 03									.byte AM_ABSOLUTE,3
>eabc	72 6f 72 00								.null "ror"
>eac0	02 03									.byte AM_ABSOLUTE,3
>eac2	42 41 44 00								.null "BAD"
>eac6	06 01									.byte AM_IMPLIED,1
>eac8	62 76 73 00								.null "bvs"
>eacc	0a 02									.byte AM_RELATIVE,2
>eace	61 64 63 00								.null "adc"
>ead2	09 02									.byte AM_INDIR_Y_IDX,2
>ead4	42 41 44 00								.null "BAD"
>ead8	06 01									.byte AM_IMPLIED,1
>eada	42 41 44 00								.null "BAD"
>eade	06 01									.byte AM_IMPLIED,1
>eae0	73 74 7a 00								.null "stz"
>eae4	0c 02									.byte AM_ZEROPAGE_X,2
>eae6	61 64 63 00								.null "adc"
>eaea	0c 02									.byte AM_ZEROPAGE_X,2
>eaec	72 6f 72 00								.null "ror"
>eaf0	0c 02									.byte AM_ZEROPAGE_X,2
>eaf2	72 6d 62 00								.null "rmb"
>eaf6	0b 02									.byte AM_ZEROPAGE,2
>eaf8	73 65 69 00								.null "sei"
>eafc	06 01									.byte AM_IMPLIED,1
>eafe	61 64 63 00								.null "adc"
>eb02	04 03									.byte AM_ABSOLUTE_Y,3
>eb04	70 6c 79 00								.null "ply"
>eb08	06 01									.byte AM_IMPLIED,1
>eb0a	42 41 44 00								.null "BAD"
>eb0e	06 01									.byte AM_IMPLIED,1
>eb10	6a 6d 70 00								.null "jmp"
>eb14	0e 03									.byte AM_ABS_IDX_IND,3
>eb16	61 64 63 00								.null "adc"
>eb1a	03 03									.byte AM_ABSOLUTE_X,3
>eb1c	72 6f 72 00								.null "ror"
>eb20	03 03									.byte AM_ABSOLUTE_X,3
>eb22	42 41 44 00								.null "BAD"
>eb26	06 01									.byte AM_IMPLIED,1
>eb28	62 72 61 00								.null "bra"
>eb2c	0a 02									.byte AM_RELATIVE,2
>eb2e	73 74 61 00								.null "sta"
>eb32	08 02									.byte AM_X_IDX_INDIR,2
>eb34	42 41 44 00								.null "BAD"
>eb38	06 01									.byte AM_IMPLIED,1
>eb3a	42 41 44 00								.null "BAD"
>eb3e	06 01									.byte AM_IMPLIED,1
>eb40	73 74 79 00								.null "sty"
>eb44	0b 02									.byte AM_ZEROPAGE,2
>eb46	73 74 61 00								.null "sta"
>eb4a	0b 02									.byte AM_ZEROPAGE,2
>eb4c	73 74 78 00								.null "stx"
>eb50	0b 02									.byte AM_ZEROPAGE,2
>eb52	73 6d 62 00								.null "smb"
>eb56	0b 02									.byte AM_ZEROPAGE,2
>eb58	64 65 79 00								.null "dey"
>eb5c	06 01									.byte AM_IMPLIED,1
>eb5e	62 69 74 00								.null "bit"
>eb62	05 02									.byte AM_IMMEDIATE,2
>eb64	74 78 61 00								.null "txa"
>eb68	06 01									.byte AM_IMPLIED,1
>eb6a	42 41 44 00								.null "BAD"
>eb6e	06 01									.byte AM_IMPLIED,1
>eb70	73 74 79 00								.null "sty"
>eb74	02 03									.byte AM_ABSOLUTE,3
>eb76	73 74 61 00								.null "sta"
>eb7a	02 03									.byte AM_ABSOLUTE,3
>eb7c	73 74 78 00								.null "stx"
>eb80	02 03									.byte AM_ABSOLUTE,3
>eb82	42 41 44 00								.null "BAD"
>eb86	06 01									.byte AM_IMPLIED,1
>eb88	62 63 63 00								.null "bcc"
>eb8c	0a 02									.byte AM_RELATIVE,2
>eb8e	73 74 61 00								.null "sta"
>eb92	09 02									.byte AM_INDIR_Y_IDX,2
>eb94	73 74 61 00								.null "sta"
>eb98	0f 02									.byte AM_ZEROPAGE_IND,2
>eb9a	42 41 44 00								.null "BAD"
>eb9e	06 01									.byte AM_IMPLIED,1
>eba0	73 74 79 00								.null "sty"
>eba4	0c 02									.byte AM_ZEROPAGE_X,2
>eba6	73 74 61 00								.null "sta"
>ebaa	0c 02									.byte AM_ZEROPAGE_X,2
>ebac	73 74 78 00								.null "stx"
>ebb0	0d 02									.byte AM_ZEROPAGE_Y,2
>ebb2	73 6d 62 00								.null "smb"
>ebb6	0b 02									.byte AM_ZEROPAGE,2
>ebb8	74 79 61 00								.null "tya"
>ebbc	06 01									.byte AM_IMPLIED,1
>ebbe	73 74 61 00								.null "sta"
>ebc2	04 03									.byte AM_ABSOLUTE_Y,3
>ebc4	74 78 73 00								.null "txs"
>ebc8	06 01									.byte AM_IMPLIED,1
>ebca	42 41 44 00								.null "BAD"
>ebce	06 01									.byte AM_IMPLIED,1
>ebd0	73 74 7a 00								.null "stz"
>ebd4	02 03									.byte AM_ABSOLUTE,3
>ebd6	73 74 61 00								.null "sta"
>ebda	03 03									.byte AM_ABSOLUTE_X,3
>ebdc	73 74 7a 00								.null "stz"
>ebe0	03 03									.byte AM_ABSOLUTE_X,3
>ebe2	42 41 44 00								.null "BAD"
>ebe6	06 01									.byte AM_IMPLIED,1
>ebe8	6c 64 79 00								.null "ldy"
>ebec	05 02									.byte AM_IMMEDIATE,2
>ebee	6c 64 61 00								.null "lda"
>ebf2	08 02									.byte AM_X_IDX_INDIR,2
>ebf4	6c 64 78 00								.null "ldx"
>ebf8	05 02									.byte AM_IMMEDIATE,2
>ebfa	42 41 44 00								.null "BAD"
>ebfe	06 01									.byte AM_IMPLIED,1
>ec00	6c 64 79 00								.null "ldy"
>ec04	0b 02									.byte AM_ZEROPAGE,2
>ec06	6c 64 61 00								.null "lda"
>ec0a	0b 02									.byte AM_ZEROPAGE,2
>ec0c	6c 64 78 00								.null "ldx"
>ec10	0b 02									.byte AM_ZEROPAGE,2
>ec12	73 6d 62 00								.null "smb"
>ec16	0b 02									.byte AM_ZEROPAGE,2
>ec18	74 61 79 00								.null "tay"
>ec1c	06 01									.byte AM_IMPLIED,1
>ec1e	6c 64 61 00								.null "lda"
>ec22	05 02									.byte AM_IMMEDIATE,2
>ec24	74 61 78 00								.null "tax"
>ec28	06 01									.byte AM_IMPLIED,1
>ec2a	42 41 44 00								.null "BAD"
>ec2e	06 01									.byte AM_IMPLIED,1
>ec30	6c 64 79 00								.null "ldy"
>ec34	02 03									.byte AM_ABSOLUTE,3
>ec36	6c 64 61 00								.null "lda"
>ec3a	02 03									.byte AM_ABSOLUTE,3
>ec3c	6c 64 78 00								.null "ldx"
>ec40	02 03									.byte AM_ABSOLUTE,3
>ec42	42 41 44 00								.null "BAD"
>ec46	06 01									.byte AM_IMPLIED,1
>ec48	62 63 73 00								.null "bcs"
>ec4c	0a 02									.byte AM_RELATIVE,2
>ec4e	6c 64 61 00								.null "lda"
>ec52	09 02									.byte AM_INDIR_Y_IDX,2
>ec54	6c 64 61 00								.null "lda"
>ec58	0f 02									.byte AM_ZEROPAGE_IND,2
>ec5a	42 41 44 00								.null "BAD"
>ec5e	06 01									.byte AM_IMPLIED,1
>ec60	6c 64 79 00								.null "ldy"
>ec64	0c 02									.byte AM_ZEROPAGE_X,2
>ec66	6c 64 61 00								.null "lda"
>ec6a	0c 02									.byte AM_ZEROPAGE_X,2
>ec6c	6c 64 78 00								.null "ldx"
>ec70	0d 02									.byte AM_ZEROPAGE_Y,2
>ec72	73 6d 62 00								.null "smb"
>ec76	0b 02									.byte AM_ZEROPAGE,2
>ec78	63 6c 76 00								.null "clv"
>ec7c	06 01									.byte AM_IMPLIED,1
>ec7e	6c 64 61 00								.null "lda"
>ec82	04 03									.byte AM_ABSOLUTE_Y,3
>ec84	74 73 78 00								.null "tsx"
>ec88	06 01									.byte AM_IMPLIED,1
>ec8a	42 41 44 00								.null "BAD"
>ec8e	06 01									.byte AM_IMPLIED,1
>ec90	6c 64 79 00								.null "ldy"
>ec94	03 03									.byte AM_ABSOLUTE_X,3
>ec96	6c 64 61 00								.null "lda"
>ec9a	03 03									.byte AM_ABSOLUTE_X,3
>ec9c	6c 64 78 00								.null "ldx"
>eca0	04 03									.byte AM_ABSOLUTE_Y,3
>eca2	42 41 44 00								.null "BAD"
>eca6	06 01									.byte AM_IMPLIED,1
>eca8	63 70 79 00								.null "cpy"
>ecac	05 02									.byte AM_IMMEDIATE,2
>ecae	63 6d 70 00								.null "cmp"
>ecb2	08 02									.byte AM_X_IDX_INDIR,2
>ecb4	42 41 44 00								.null "BAD"
>ecb8	06 01									.byte AM_IMPLIED,1
>ecba	42 41 44 00								.null "BAD"
>ecbe	06 01									.byte AM_IMPLIED,1
>ecc0	63 70 79 00								.null "cpy"
>ecc4	0b 02									.byte AM_ZEROPAGE,2
>ecc6	63 6d 70 00								.null "cmp"
>ecca	0b 02									.byte AM_ZEROPAGE,2
>eccc	64 65 63 00								.null "dec"
>ecd0	0b 02									.byte AM_ZEROPAGE,2
>ecd2	73 6d 62 00								.null "smb"
>ecd6	0b 02									.byte AM_ZEROPAGE,2
>ecd8	69 6e 79 00								.null "iny"
>ecdc	06 01									.byte AM_IMPLIED,1
>ecde	63 6d 70 00								.null "cmp"
>ece2	05 02									.byte AM_IMMEDIATE,2
>ece4	64 65 78 00								.null "dex"
>ece8	06 01									.byte AM_IMPLIED,1
>ecea	42 41 44 00								.null "BAD"
>ecee	06 01									.byte AM_IMPLIED,1
>ecf0	63 70 79 00								.null "cpy"
>ecf4	02 03									.byte AM_ABSOLUTE,3
>ecf6	63 6d 70 00								.null "cmp"
>ecfa	02 03									.byte AM_ABSOLUTE,3
>ecfc	64 65 63 00								.null "dec"
>ed00	02 03									.byte AM_ABSOLUTE,3
>ed02	42 41 44 00								.null "BAD"
>ed06	06 01									.byte AM_IMPLIED,1
>ed08	62 6e 65 00								.null "bne"
>ed0c	0a 02									.byte AM_RELATIVE,2
>ed0e	63 6d 70 00								.null "cmp"
>ed12	09 02									.byte AM_INDIR_Y_IDX,2
>ed14	42 41 44 00								.null "BAD"
>ed18	06 01									.byte AM_IMPLIED,1
>ed1a	42 41 44 00								.null "BAD"
>ed1e	06 01									.byte AM_IMPLIED,1
>ed20	42 41 44 00								.null "BAD"
>ed24	06 01									.byte AM_IMPLIED,1
>ed26	63 6d 70 00								.null "cmp"
>ed2a	0c 02									.byte AM_ZEROPAGE_X,2
>ed2c	64 65 63 00								.null "dec"
>ed30	0c 02									.byte AM_ZEROPAGE_X,2
>ed32	73 6d 62 00								.null "smb"
>ed36	0b 02									.byte AM_ZEROPAGE,2
>ed38	63 6c 64 00								.null "cld"
>ed3c	06 01									.byte AM_IMPLIED,1
>ed3e	63 6d 70 00								.null "cmp"
>ed42	04 03									.byte AM_ABSOLUTE_Y,3
>ed44	70 68 78 00								.null "phx"
>ed48	06 01									.byte AM_IMPLIED,1
>ed4a	53 54 50 00								.null "STP"
>ed4e	06 01									.byte AM_IMPLIED,1
>ed50	42 41 44 00								.null "BAD"
>ed54	06 01									.byte AM_IMPLIED,1
>ed56	63 6d 70 00								.null "cmp"
>ed5a	03 03									.byte AM_ABSOLUTE_X,3
>ed5c	64 65 63 00								.null "dec"
>ed60	03 03									.byte AM_ABSOLUTE_X,3
>ed62	42 41 44 00								.null "BAD"
>ed66	06 01									.byte AM_IMPLIED,1
>ed68	63 70 78 00								.null "cpx"
>ed6c	05 02									.byte AM_IMMEDIATE,2
>ed6e	73 62 63 00								.null "sbc"
>ed72	08 02									.byte AM_X_IDX_INDIR,2
>ed74	42 41 44 00								.null "BAD"
>ed78	06 01									.byte AM_IMPLIED,1
>ed7a	42 41 44 00								.null "BAD"
>ed7e	06 01									.byte AM_IMPLIED,1
>ed80	63 70 78 00								.null "cpx"
>ed84	0b 02									.byte AM_ZEROPAGE,2
>ed86	73 62 63 00								.null "sbc"
>ed8a	0b 02									.byte AM_ZEROPAGE,2
>ed8c	69 6e 63 00								.null "inc"
>ed90	0b 02									.byte AM_ZEROPAGE,2
>ed92	73 6d 62 00								.null "smb"
>ed96	0b 02									.byte AM_ZEROPAGE,2
>ed98	69 6e 78 00								.null "inx"
>ed9c	06 01									.byte AM_IMPLIED,1
>ed9e	73 62 63 00								.null "sbc"
>eda2	05 02									.byte AM_IMMEDIATE,2
>eda4	6e 6f 70 00								.null "nop"
>eda8	06 01									.byte AM_IMPLIED,1
>edaa	42 41 44 00								.null "BAD"
>edae	06 01									.byte AM_IMPLIED,1
>edb0	63 70 78 00								.null "cpx"
>edb4	02 03									.byte AM_ABSOLUTE,3
>edb6	73 62 63 00								.null "sbc"
>edba	02 03									.byte AM_ABSOLUTE,3
>edbc	69 6e 63 00								.null "inc"
>edc0	02 03									.byte AM_ABSOLUTE,3
>edc2	42 41 44 00								.null "BAD"
>edc6	06 01									.byte AM_IMPLIED,1
>edc8	62 65 71 00								.null "beq"
>edcc	0a 02									.byte AM_RELATIVE,2
>edce	73 62 63 00								.null "sbc"
>edd2	09 02									.byte AM_INDIR_Y_IDX,2
>edd4	42 41 44 00								.null "BAD"
>edd8	06 01									.byte AM_IMPLIED,1
>edda	42 41 44 00								.null "BAD"
>edde	06 01									.byte AM_IMPLIED,1
>ede0	42 41 44 00								.null "BAD"
>ede4	06 01									.byte AM_IMPLIED,1
>ede6	73 62 63 00								.null "sbc"
>edea	0c 02									.byte AM_ZEROPAGE_X,2
>edec	69 6e 63 00								.null "inc"
>edf0	0c 02									.byte AM_ZEROPAGE_X,2
>edf2	73 6d 62 00								.null "smb"
>edf6	0b 02									.byte AM_ZEROPAGE,2
>edf8	73 65 64 00								.null "sed"
>edfc	06 01									.byte AM_IMPLIED,1
>edfe	73 62 63 00								.null "sbc"
>ee02	04 03									.byte AM_ABSOLUTE_Y,3
>ee04	70 6c 78 00								.null "plx"
>ee08	06 01									.byte AM_IMPLIED,1
>ee0a	42 41 44 00								.null "BAD"
>ee0e	06 01									.byte AM_IMPLIED,1
>ee10	42 41 44 00								.null "BAD"
>ee14	06 01									.byte AM_IMPLIED,1
>ee16	73 62 63 00								.null "sbc"
>ee1a	03 03									.byte AM_ABSOLUTE_X,3
>ee1c	69 6e 63 00								.null "inc"
>ee20	03 03									.byte AM_ABSOLUTE_X,3
>ee22	42 41 44 00								.null "BAD"
>ee26	06 01									.byte AM_IMPLIED,1
												.endproc
												.endproc

.ee28									doLoad .proc
.ee28	20 e1 f1		jsr $f1e1				jsr skipToNextToken
.ee2b	90 03			bcc $ee30				bcc getFileName

.ee2d	4c 56 ef		jmp $ef56				jmp doHelp

.ee30									getFileName
.ee30	a0 00			ldy #$00				ldy #$000

.ee32									getFileNameLoop
.ee32	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.ee35	99 1a dc		sta $dc1a,y				sta FILEIO_FILENAME,y
.ee38	f0 04			beq $ee3e				beq gotFileName
.ee3a	e8				inx						inx
.ee3b	c8				iny						iny
.ee3c	80 f4			bra $ee32				bra getFileNameLoop

.ee3e									gotFileName
.ee3e	20 28 f2		jsr $f228				jsr MPutStr
>ee41	6c 6f 61 64 69 6e 67 20					.null "loading file "
>ee49	66 69 6c 65 20 00
.ee4f	a2 1a			ldx #$1a				ldx #<FILEIO_FILENAME
.ee51	a0 dc			ldy #$dc				ldy #>FILEIO_FILENAME
.ee53	20 f4 e0		jsr $e0f4				jsr KWRITESTR
.ee56	20 13 e1		jsr $e113				jsr KWRITECRLF

.ee59	20 0a ef		jsr $ef0a				jsr fileIOOpen
.ee5c	f0 1b			beq $ee79				beq loadFileAddr

.ee5e	20 28 f2		jsr $f228				jsr MPutStr
>ee61	43 6f 75 6c 64 20 6e 6f					.null "Could not open file",$0a
>ee69	74 20 6f 70 65 6e 20 66 69 6c 65 0a 00
.ee76	4c 03 ef		jmp $ef03				jmp loadFileDone

.ee79									loadFileAddr
.ee79	20 31 ef		jsr $ef31				jsr fileIORead
.ee7c	d0 24			bne $eea2				bne loadFileError

.ee7e	ad 14 dc		lda $dc14				lda FILEIO_CDATA_LO
.ee81	85 d4			sta $d4					sta T1_VECTOR
.ee83	20 31 ef		jsr $ef31				jsr fileIORead
.ee86	d0 1a			bne $eea2				bne loadFileError

.ee88	ad 14 dc		lda $dc14				lda FILEIO_CDATA_LO
.ee8b	85 d5			sta $d5					sta T1_VECTOR+1

.ee8d	20 28 f2		jsr $f228				jsr MPutStr
>ee90	3e 20 00								.null "> "
.ee93	a5 d5			lda $d5					lda T1_VECTOR+1
.ee95	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.ee98	a5 d4			lda $d4					lda T1_VECTOR
.ee9a	20 b1 f1		jsr $f1b1				jsr MWriteHexByte
.ee9d	20 13 e1		jsr $e113				jsr KWRITECRLF

.eea0	80 22			bra $eec4				bra loadFileData

.eea2									loadFileError
.eea2	20 28 f2		jsr $f228				jsr MPutStr
>eea5	43 6f 75 6c 64 20 6e 6f					.null "Could not load file (a)",$0a
>eead	74 20 6c 6f 61 64 20 66 69 6c 65 20 28 61 29 0a
>eebd	00
.eebe	20 20 ef		jsr $ef20				jsr fileIOClose

.eec1	4c 03 ef		jmp $ef03				jmp loadFileDone

.eec4									loadFileData
.eec4	20 31 ef		jsr $ef31				jsr fileIORead
.eec7	d0 14			bne $eedd				bne loadFileDataDone
.eec9	ad 14 dc		lda $dc14				lda FILEIO_CDATA_LO
.eecc	92 d4			sta ($d4)				sta (T1_VECTOR)
.eece	18				clc						clc
.eecf	a5 d4			lda $d4					lda T1_VECTOR
.eed1	69 01			adc #$01				adc #$01
.eed3	85 d4			sta $d4					sta T1_VECTOR
.eed5	a5 d5			lda $d5					lda T1_VECTOR+1
.eed7	69 00			adc #$00				adc #$00
.eed9	85 d5			sta $d5					sta T1_VECTOR+1
.eedb	80 e7			bra $eec4				bra loadFileData

.eedd									loadFileDataDone
.eedd	ad 18 dc		lda $dc18				lda FILEIO_CSTATUS
.eee0	c9 01			cmp #$01				cmp #FILEIO_STATUS_EOF
.eee2	f0 1c			beq $ef00				beq closeFile

.eee4	20 28 f2		jsr $f228				jsr MPutStr
>eee7	43 6f 75 6c 64 20 6e 6f					.null "Could not load file (b)",$0a
>eeef	74 20 6c 6f 61 64 20 66 69 6c 65 20 28 62 29 0a
>eeff	00

.ef00									closeFile
.ef00	20 20 ef		jsr $ef20				jsr fileIOClose

.ef03									loadFileDone
.ef03	60				rts						rts
												.endproc

.ef04									fileIOWait .proc
.ef04	ad 10 dc		lda $dc10				lda FILEIO_CREADY
.ef07	d0 fb			bne $ef04				bne fileIOWait
.ef09	60				rts						rts
												.endproc

.ef0a									fileIOOpen .proc
.ef0a	a9 01			lda #$01				lda #FILEIO_MODE_READ
.ef0c	8d 13 dc		sta $dc13				sta FILEIO_CMODE
.ef0f	a9 01			lda #$01				lda #FILEIO_CMD_OPEN
.ef11	8d 11 dc		sta $dc11				sta FILEIO_CCMD
.ef14	a9 01			lda #$01				lda #$01
.ef16	8d 10 dc		sta $dc10				sta FILEIO_CREADY
.ef19	20 04 ef		jsr $ef04				jsr fileIOWait
.ef1c	ad 18 dc		lda $dc18				lda FILEIO_CSTATUS
.ef1f	60				rts						rts
												.endproc

.ef20									fileIOClose .proc			; assumes fd in already stored at FILEIO_CFD
.ef20	a9 02			lda #$02				lda #FILEIO_CMD_CLOSE
.ef22	8d 11 dc		sta $dc11				sta FILEIO_CCMD
.ef25	a9 01			lda #$01				lda #$01
.ef27	8d 10 dc		sta $dc10				sta FILEIO_CREADY
.ef2a	20 04 ef		jsr $ef04				jsr fileIOWait
.ef2d	ad 18 dc		lda $dc18				lda FILEIO_CSTATUS
.ef30	60				rts						rts
												.endproc

.ef31									fileIORead .proc			; assumes fd is already stored at FILEIO_CFD
.ef31	a9 03			lda #$03				lda #FILEIO_CMD_READ
.ef33	8d 11 dc		sta $dc11				sta FILEIO_CCMD
.ef36	a9 01			lda #$01				lda #$01
.ef38	8d 10 dc		sta $dc10				sta FILEIO_CREADY
.ef3b	20 04 ef		jsr $ef04				jsr fileIOWait
.ef3e	ad 18 dc		lda $dc18				lda FILEIO_CSTATUS
.ef41	60				rts						rts
												.endproc

.ef42									doTest .proc
.ef42	64 80			stz $80					stz $80
.ef44	a9 01			lda #$01				lda #1
.ef46	48				pha						pha
.ef47	20 4c ef		jsr $ef4c				jsr doTest2
.ef4a	68				pla						pla
.ef4b	60				rts						rts
.ef4c									doTest2
.ef4c	ba				tsx						tsx
.ef4d	e8				inx						inx
.ef4e	e8				inx						inx
.ef4f	e8				inx						inx
.ef50	bd 00 01		lda $0100,x				lda $0100,x
.ef53	85 80			sta $80					sta $80

.ef55	60				rts						rts
												.endproc

.ef56									doHelp .proc
.ef56	20 28 f2		jsr $f228				jsr MPutStr
>ef59	43 6f 6d 6d 61 6e 64 73					.text "Commands:",$0a
>ef61	3a 0a
>ef63	20 20 71 20 20 20 20 20					.text "  q                   quit",$0a
>ef6b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 71 75
>ef7b	69 74 0a
>ef7e	20 20 77 20 61 64 64 72					.text "  w addr bb [bb..]    write bytes at addr",$0a
>ef86	20 62 62 20 5b 62 62 2e 2e 5d 20 20 20 20 77 72
>ef96	69 74 65 20 62 79 74 65 73 20 61 74 20 61 64 64
>efa6	72 0a
>efa8	20 20 6d 20 5b 61 64 64					.text "  m [addr]            dump memory at [addr] or most recent addr",$0a
>efb0	72 5d 20 20 20 20 20 20 20 20 20 20 20 20 64 75
>efc0	6d 70 20 6d 65 6d 6f 72 79 20 61 74 20 5b 61 64
>efd0	64 72 5d 20 6f 72 20 6d 6f 73 74 20 72 65 63 65
>efe0	6e 74 20 61 64 64 72 0a
>efe8	20 20 6a 20 61 64 64 72					.text "  j addr              jump to address",$0a
>eff0	20 20 20 20 20 20 20 20 20 20 20 20 20 20 6a 75
>f000	6d 70 20 74 6f 20 61 64 64 72 65 73 73 0a
>f00e	20 20 63 20 20 20 20 20					.text "  c                   continue (from breakpoint)",$0a
>f016	20 20 20 20 20 20 20 20 20 20 20 20 20 20 63 6f
>f026	6e 74 69 6e 75 65 20 28 66 72 6f 6d 20 62 72 65
>f036	61 6b 70 6f 69 6e 74 29 0a
>f03f	20 20 62 20 20 20 20 20					.text "  b                   toggle breakpoints",$0a
>f047	20 20 20 20 20 20 20 20 20 20 20 20 20 20 74 6f
>f057	67 67 6c 65 20 62 72 65 61 6b 70 6f 69 6e 74 73
>f067	0a
>f068	20 20 64 20 5b 61 64 64					.text "  d [addr]            disassemble 20 instructions at [addr] or most recent addr",$0a
>f070	72 5d 20 20 20 20 20 20 20 20 20 20 20 20 64 69
>f080	73 61 73 73 65 6d 62 6c 65 20 32 30 20 69 6e 73
>f090	74 72 75 63 74 69 6f 6e 73 20 61 74 20 5b 61 64
>f0a0	64 72 5d 20 6f 72 20 6d 6f 73 74 20 72 65 63 65
>f0b0	6e 74 20 61 64 64 72 0a
>f0b8	20 20 6c 20 66 69 6c 65					.text "  l filename          load binary file",$0a
>f0c0	6e 61 6d 65 20 20 20 20 20 20 20 20 20 20 6c 6f
>f0d0	61 64 20 62 69 6e 61 72 79 20 66 69 6c 65 0a
>f0df	20 20 20 20 20 20 20 20					.text "                      assumes load address in first 2 bytes of file",$0a
>f0e7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 61 73
>f0f7	73 75 6d 65 73 20 6c 6f 61 64 20 61 64 64 72 65
>f107	73 73 20 69 6e 20 66 69 72 73 74 20 32 20 62 79
>f117	74 65 73 20 6f 66 20 66 69 6c 65 0a
>f123	20 20 68 20 20 20 20 20					.null "  h                   display this help text",$0a
>f12b	20 20 20 20 20 20 20 20 20 20 20 20 20 20 64 69
>f13b	73 70 6c 61 79 20 74 68 69 73 20 68 65 6c 70 20
>f14b	74 65 78 74 0a 00
.f151	60				rts						rts
												.endproc
												.endproc

.f152									MHexToDigit .proc
.f152	c9 47			cmp #$47				cmp #$47
.f154	90 02			bcc $f158				blt MHexToDigit1

.f156	29 df			and #$df				and #$DF

.f158									MHexToDigit1
.f158	38				sec						sec
.f159	e9 30			sbc #$30				sbc #$30
.f15b	c9 0a			cmp #$0a				cmp #$0a
.f15d	90 03			bcc $f162				blt MHexToDigitDone
.f15f	38				sec						sec
.f160	e9 07			sbc #$07				sbc #$07

.f162									MHexToDigitDone
.f162	60				rts						rts
												.endproc

.f163									getHexByte .proc
.f163	e0 ff			cpx #$ff				cpx #INPUT_BUFFER_LEN
.f165	f0 22			beq $f189				beq getHexByteBad

.f167	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.f16a	f0 1d			beq $f189				beq getHexByteBad

.f16c	20 52 f1		jsr $f152				jsr MHexToDigit
.f16f	0a				asl a					asl
.f170	0a				asl a					asl
.f171	0a				asl a					asl
.f172	0a				asl a					asl
.f173	85 f7			sta $f7					sta HEX_BYTE_BUFFER

.f175	e8				inx						inx
.f176	e0 ff			cpx #$ff				cpx #INPUT_BUFFER_LEN
.f178	f0 0f			beq $f189				beq getHexByteBad

.f17a	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.f17d	f0 0a			beq $f189				beq getHexByteBad

.f17f	20 52 f1		jsr $f152				jsr MHexToDigit
.f182	05 f7			ora $f7					ora HEX_BYTE_BUFFER
.f184	85 f7			sta $f7					sta HEX_BYTE_BUFFER

.f186	18				clc						clc
.f187	80 01			bra $f18a				bra getHexByteDone

.f189									getHexByteBad
.f189	38				sec						sec

.f18a									getHexByteDone
.f18a	60				rts						rts
												.endproc

.f18b									getHexAddr .proc
.f18b	20 63 f1		jsr $f163				jsr getHexByte
.f18e	b0 15			bcs $f1a5				bcs getHexAddrDone

.f190	a5 f7			lda $f7					lda HEX_BYTE_BUFFER
.f192	85 f6			sta $f6					sta HEX_ADDR_BUFFER+1

.f194	e8				inx						inx
.f195	e0 ff			cpx #$ff				cpx #INPUT_BUFFER_LEN
.f197	d0 03			bne $f19c				bne getHexAddr1

.f199	38				sec						sec
.f19a	80 09			bra $f1a5				bra getHexAddrDone

.f19c									getHexAddr1
.f19c	20 63 f1		jsr $f163				jsr getHexByte
.f19f	b0 04			bcs $f1a5				bcs getHexAddrDone

.f1a1	a5 f7			lda $f7					lda HEX_BYTE_BUFFER
.f1a3	85 f5			sta $f5					sta HEX_ADDR_BUFFER

.f1a5									getHexAddrDone
.f1a5	60				rts						rts
												.endproc

.f1a6									MByteToHexDigit .proc
.f1a6	c9 0a			cmp #$0a				cmp #$0a
.f1a8	90 03			bcc $f1ad				blt MByteToHexDigit1

.f1aa	18				clc						clc
.f1ab	69 07			adc #$07				adc #$07

.f1ad									MByteToHexDigit1
.f1ad	18				clc						clc
.f1ae	69 30			adc #$30				adc #$30

.f1b0	60				rts						rts
												.endproc

.f1b1									MWriteHexByte .proc
.f1b1	48				pha						pha
.f1b2	48				pha						pha

.f1b3	4a				lsr a					lsr
.f1b4	4a				lsr a					lsr
.f1b5	4a				lsr a					lsr
.f1b6	4a				lsr a					lsr

.f1b7	20 a6 f1		jsr $f1a6				jsr MByteToHexDigit
.f1ba	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.f1bd	68				pla						pla
.f1be	29 0f			and #$0f				and #$0f

.f1c0	20 a6 f1		jsr $f1a6				jsr MByteToHexDigit
.f1c3	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.f1c6	68				pla						pla
.f1c7	60				rts						rts
												.endproc

.f1c8									MWriteBinaryByte .proc
.f1c8	48				pha						pha
.f1c9	da				phx						phx

.f1ca	18				clc						clc
.f1cb	a2 08			ldx #$08				ldx #$08

.f1cd									writeBinaryDigit1
.f1cd	0a				asl a					asl
.f1ce	48				pha						pha

.f1cf	90 04			bcc $f1d5				bcc writeBinaryDigit2

.f1d1	a9 31			lda #$31				lda #'1'
.f1d3	80 02			bra $f1d7				bra writeBinaryDigit3

.f1d5									writeBinaryDigit2
.f1d5	a9 30			lda #$30				lda #'0'

.f1d7									writeBinaryDigit3
.f1d7	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.f1da	68				pla						pla

.f1db	ca				dex						dex
.f1dc	d0 ef			bne $f1cd				bne writeBinaryDigit1

.f1de	fa				plx						plx
.f1df	68				pla						pla

.f1e0	60				rts						rts
												.endproc

.f1e1									skipToNextToken .proc
.f1e1	20 fe f1		jsr $f1fe				jsr skipToSpace

.f1e4	e0 ff			cpx #$ff				cpx #INPUT_BUFFER_LEN
.f1e6	f0 14			beq $f1fc				beq noToken

.f1e8	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.f1eb	f0 0f			beq $f1fc				beq noToken

.f1ed	20 0f f2		jsr $f20f				jsr skipSpaces

.f1f0	e0 ff			cpx #$ff				cpx #INPUT_BUFFER_LEN
.f1f2	f0 08			beq $f1fc				beq noToken

.f1f4	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.f1f7	f0 03			beq $f1fc				beq noToken

.f1f9	18				clc						clc

.f1fa	80 01			bra $f1fd				bra skipToNextTokenDone

.f1fc									noToken
.f1fc	38				sec						sec

.f1fd									skipToNextTokenDone
.f1fd	60				rts						rts
												.endproc

.f1fe									skipToSpace .proc
.f1fe	e0 ff			cpx #$ff				cpx #INPUT_BUFFER_LEN
.f200	f0 0c			beq $f20e				beq skipToSpaceDone

.f202	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.f205	f0 07			beq $f20e				beq skipToSpaceDone

.f207	c9 20			cmp #$20				cmp #$20
.f209	f0 03			beq $f20e				beq skipToSpaceDone

.f20b	e8				inx						inx
.f20c	80 f0			bra $f1fe				bra skipToSpace

.f20e									skipToSpaceDone
.f20e	60				rts						rts
												.endproc

.f20f									skipSpaces .proc
.f20f	e0 ff			cpx #$ff				cpx #INPUT_BUFFER_LEN
.f211	f0 0c			beq $f21f				beq skipSpacesDone

.f213	bd 00 de		lda $de00,x				lda INPUT_BUFFER,x
.f216	f0 07			beq $f21f				beq skipSpacesDone

.f218	c9 20			cmp #$20				cmp #$20
.f21a	d0 03			bne $f21f				bne skipSpacesDone

.f21c	e8				inx						inx
.f21d	80 f0			bra $f20f				bra skipSpaces

.f21f									skipSpacesDone
.f21f	60				rts						rts
												.endproc

.f220									writeSpace .proc
.f220	48				pha						pha

.f221	a9 20			lda #$20				lda #' '
.f223	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.f226	68				pla						pla
.f227	60				rts						rts
												.endproc

										;*****************************************************************************
										; Function:		MPutStr
										; Description:	Writes z-string imbeded after the jsr instruction to the
										;				terminal
										; Input:		nothing
										; Changes:		nothing
										; Returns:		nothing
										;*****************************************************************************
.f228									MPutStr .proc
.f228	86 db			stx $db					stx XSAVE2
.f22a	84 dc			sty $dc					sty YSAVE2
.f22c	85 da			sta $da					sta ASAVE2

.f22e	68				pla						pla			; get return address into zero-page
.f22f	85 dd			sta $dd					sta WIMT_VECTOR
.f231	68				pla						pla
.f232	85 de			sta $de					sta WIMT_VECTOR+1

.f234	a0 00			ldy #$00				ldy #$00
.f236									nextChar
.f236	e6 dd			inc $dd					inc WIMT_VECTOR
.f238	d0 02			bne $f23c				bne writeChar
.f23a	e6 de			inc $de					inc WIMT_VECTOR+1

.f23c									writeChar
.f23c	b1 dd			lda ($dd),y				lda (WIMT_VECTOR),y
.f23e	f0 05			beq $f245				beq done
.f240	20 e2 e0		jsr $e0e2				jsr KWRITETERM

.f243	80 f1			bra $f236				bra nextChar

.f245									done
.f245	a5 de			lda $de					lda WIMT_VECTOR+1
.f247	48				pha						pha
.f248	a5 dd			lda $dd					lda WIMT_VECTOR
.f24a	48				pha						pha

.f24b	a6 db			ldx $db					ldx XSAVE2
.f24d	a4 dc			ldy $dc					ldy YSAVE2
.f24f	a5 da			lda $da					lda ASAVE2

.f251	60				rts						rts
												.endproc
												.endblock

										;*****************************************************************************
										; Function:		KMONINIT
										; Description:	Initializes monitor data
										; Input:		nothing
										; Changes:		a
										; Returns:		nothing
										;*****************************************************************************
.f252									KMONINIT .block
.f252	64 df			stz $df					stz MON_CMD_VECTOR
.f254	64 e0			stz $e0					stz MON_CMD_VECTOR+1
.f256	64 e1			stz $e1					stz MON_ADDR_VECTOR
.f258	64 e2			stz $e2					stz MON_ADDR_VECTOR+1
.f25a	64 e5			stz $e5					stz BRK_SAVE_A
.f25c	64 e6			stz $e6					stz BRK_SAVE_X
.f25e	64 e7			stz $e7					stz BRK_SAVE_Y
.f260	64 e8			stz $e8					stz BRK_SAVE_SP
.f262	64 e9			stz $e9					stz BRK_PC_VECTOR
.f264	64 ea			stz $ea					stz BRK_PC_VECTOR+1
.f266	64 eb			stz $eb					stz BRK_STATUS_REG
.f268	64 ec			stz $ec					stz MON_FROM_BRK
.f26a	a9 01			lda #$01				lda #$01
.f26c	85 ed			sta $ed					sta MON_BP_ENABLE
.f26e	a9 ff			lda #$ff				lda #$ff
.f270	85 f8			sta $f8					sta MON_COLD_START

.f272	60				rts						rts
												.endblock

;******  Return to file: /Users/davidhunt/Projects/dputer2/src/kernel/kernel.asm



										;*****************************************************************************
										; Kernel Jump Table
										;*****************************************************************************
												* = $FF80
.ff80	4c e2 e0		jmp $e0e2		CHROUT		jmp KWRITETERM
.ff83	4c 9b e0		jmp $e09b		CHRIN		jmp KGETCHAR
.ff86	4c 8e e0		jmp $e08e		CHRCHK		jmp KCHECKTERM
.ff89	4c 66 e2		jmp $e266		KMON		jmp MONITOR
.ff8c	4c b1 f1		jmp $f1b1		KWHEXBYT	jmp MONITOR.MWriteHexByte
.ff8f	4c 28 f2		jmp $f228		KPUTSTR		jmp MONITOR.MPutStr


										        * = $FFFA
>fffa	65 e2							NMIVEC	.word DONMI
>fffc	00 e0							RESVEC	.word KRESET
>fffe	02 e2							IRQVEC	.word DOIRQ

;******  End of listing
